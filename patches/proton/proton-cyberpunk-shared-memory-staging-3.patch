From f8f85c02a3a9b312c9b9db3314574ef10b8dd369 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 22 Jan 2021 17:34:25 +0100
Subject: [PATCH] user32: Call get_message request at least once every 3s.

So that the thread queue isn't incorrectly flagged as hung.
---
 dlls/user32/message.c      | 3 ++-
 dlls/user32/user_private.h | 1 +
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index 03ff8a7f099..1029253b9a1 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -2683,7 +2683,7 @@ static int peek_message( MSG *msg, HWND hwnd, UINT first, UINT last, UINT flags,
 
         thread_info->msg_source = prev_source;
 
-        if (!shared || waited) skip = FALSE;
+        if (!shared || waited || GetTickCount() - thread_info->last_getmsg_time >= 3000) skip = FALSE;
         else SHARED_READ_BEGIN( &shared->seq )
         {
             /* if the masks need an update */
@@ -2711,6 +2711,7 @@ static int peek_message( MSG *msg, HWND hwnd, UINT first, UINT last, UINT flags,
             req->wake_mask = changed_mask & (QS_SENDMESSAGE | QS_SMRESULT);
             req->changed_mask = changed_mask;
             wine_server_set_reply( req, buffer, buffer_size );
+            thread_info->last_getmsg_time = GetTickCount();
             if (!(res = wine_server_call( req )))
             {
                 size = wine_server_reply_size( reply );
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index e5b36925f52..74299781cef 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -187,6 +187,7 @@ struct user_thread_info
     DWORD                         wake_mask;              /* Current queue wake mask */
     DWORD                         changed_mask;           /* Current queue changed mask */
     DWORD                         last_driver_time;       /* Get/PeekMessage driver event time */
+    DWORD                         last_getmsg_time;       /* Get/PeekMessage last request time */
     WORD                          recursion_count;        /* SendMessage recursion counter */
     WORD                          message_count;          /* Get/PeekMessage loop counter */
     WORD                          hook_call_depth;        /* Number of recursively called hook procs */
From b93c5484093cbf5df015e2710fbfc6d144c6bb09 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 14 Jan 2021 14:34:42 +0100
Subject: [PATCH] user32: Factor thread shared memory section mapping.

---
 dlls/user32/winstation.c | 90 ++++++++++++++++------------------------
 1 file changed, 35 insertions(+), 55 deletions(-)

diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index 575420c1f37..8d384d3209d 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -105,6 +105,36 @@ static const WCHAR *get_winstation_default_name( void )
 }
 
 
+static void map_shared_memory_section( const WCHAR *name, SIZE_T size, HANDLE root, HANDLE *handle, void **ptr )
+{
+    OBJECT_ATTRIBUTES attr;
+    UNICODE_STRING section_str;
+    NTSTATUS status;
+
+    RtlInitUnicodeString( &section_str, name );
+    InitializeObjectAttributes( &attr, &section_str, 0, root, NULL );
+    status = NtOpenSection( handle, SECTION_ALL_ACCESS, &attr );
+    if (status)
+    {
+        ERR( "failed to open section %s: %08x\n", debugstr_w(name), status );
+        *ptr = NULL;
+        *handle = NULL;
+        return;
+    }
+
+    *ptr = NULL;
+    status = NtMapViewOfSection( *handle, GetCurrentProcess(), ptr, 0, 0, NULL,
+                                 &size, ViewUnmap, 0, PAGE_READONLY );
+    if (status)
+    {
+        ERR( "failed to map view of section %s: %08x\n", debugstr_w(name), status );
+        CloseHandle( *handle );
+        *ptr = NULL;
+        *handle = NULL;
+    }
+}
+
+
 volatile struct desktop_shared_memory *get_desktop_shared_memory( void )
 {
     static const WCHAR dir_desktop_mapsW[] = {'_','_','w','i','n','e','_','d','e','s','k','t','o','p','_','m','a','p','p','i','n','g','s','\\'};
@@ -112,10 +142,6 @@ volatile struct desktop_shared_memory *get_desktop_shared_memory( void )
     HANDLE root = get_winstations_dir_handle(), handles[2];
     WCHAR buf[MAX_PATH], *ptr;
     DWORD i, needed;
-    OBJECT_ATTRIBUTES attr;
-    UNICODE_STRING section_str;
-    NTSTATUS status;
-    SIZE_T size;
 
     if (thread_info->desktop_shared_memory) return thread_info->desktop_shared_memory;
 
@@ -132,28 +158,8 @@ volatile struct desktop_shared_memory *get_desktop_shared_memory( void )
         if (i == 0) *(ptr - 1) = '\\';
     }
 
-    RtlInitUnicodeString( &section_str, buf );
-    InitializeObjectAttributes( &attr, &section_str, 0, root, NULL );
-    status = NtOpenSection( &handles[0], SECTION_ALL_ACCESS, &attr );
-    if (status)
-    {
-        ERR( "failed to open the desktop section: %08x\n", status );
-        return NULL;
-    }
-
-    ptr = NULL;
-    size = sizeof(struct desktop_shared_memory);
-    status = NtMapViewOfSection( handles[0], GetCurrentProcess(), (void *)&ptr, 0, 0, NULL,
-                                 &size, ViewUnmap, 0, PAGE_READONLY );
-    if (status)
-    {
-        ERR( "failed to map view of the desktop section: %08x\n", status );
-        CloseHandle( handles[0] );
-        return NULL;
-    }
-
-    thread_info->desktop_shared_map = handles[0];
-    thread_info->desktop_shared_memory = (struct desktop_shared_memory *)ptr;
+    map_shared_memory_section( buf, sizeof(struct desktop_shared_memory), root,
+                               &thread_info->desktop_shared_map, (void **)&thread_info->desktop_shared_memory );
     return thread_info->desktop_shared_memory;
 }
 
@@ -166,39 +166,12 @@ volatile struct thread_shared_memory *get_thread_shared_memory( void )
                                              '\\','_','_','w','i','n','e','_','t','h','r','e','a','d','_','m','a','p','p','i','n','g','s',
                                              '\\','%','0','8','x',0};
     struct user_thread_info *thread_info = get_user_thread_info();
-    HANDLE handle;
     WCHAR buf[MAX_PATH];
-    OBJECT_ATTRIBUTES attr;
-    UNICODE_STRING section_str;
-    NTSTATUS status;
-    SIZE_T size;
-    void *ptr;
 
     if (thread_info->thread_shared_memory) return thread_info->thread_shared_memory;
-
     swprintf( buf, ARRAY_SIZE(buf), dir_thread_mapsW, GetCurrentThreadId() );
-    RtlInitUnicodeString( &section_str, buf );
-    InitializeObjectAttributes( &attr, &section_str, 0, NULL, NULL );
-    status = NtOpenSection( &handle, SECTION_ALL_ACCESS, &attr );
-    if (status)
-    {
-        ERR( "failed to open the thread section: %08x\n", status );
-        return NULL;
-    }
-
-    ptr = NULL;
-    size = sizeof(struct thread_shared_memory);
-    status = NtMapViewOfSection( handle, GetCurrentProcess(), (void *)&ptr, 0, 0, NULL,
-                                 &size, ViewUnmap, 0, PAGE_READONLY );
-    if (status)
-    {
-        ERR( "failed to map view of the thread section: %08x\n", status );
-        CloseHandle( handle );
-        return NULL;
-    }
-
-    thread_info->thread_shared_map = handle;
-    thread_info->thread_shared_memory = (struct thread_shared_memory *)ptr;
+    map_shared_memory_section( buf, sizeof(struct thread_shared_memory), NULL,
+                               &thread_info->thread_shared_map, (void **)&thread_info->thread_shared_memory );
     return thread_info->thread_shared_memory;
 }
 
From 4d4f0dae9e764577271ec48441f557e4d791a177 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 22:31:23 +0100
Subject: [PATCH] server: Rename thread shared memory to queue shared memory.

---
 dlls/user32/message.c          |  2 +-
 dlls/user32/user_main.c        |  8 ++++----
 dlls/user32/user_private.h     |  6 +++---
 dlls/user32/winstation.c       | 14 +++++++-------
 include/wine/server_protocol.h |  4 ++--
 server/protocol.def            |  2 +-
 server/queue.c                 |  4 ++--
 server/thread.c                | 22 +++++++++++-----------
 server/thread.h                |  4 ++--
 9 files changed, 33 insertions(+), 33 deletions(-)

diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index 1029253b9a1..c85d3ad3c47 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -2652,7 +2652,7 @@ static inline void call_sendmsg_callback( SENDASYNCPROC callback, HWND hwnd, UIN
 static int peek_message( MSG *msg, HWND hwnd, UINT first, UINT last, UINT flags, UINT changed_mask, BOOL waited )
 {
     LRESULT result;
-    volatile struct thread_shared_memory *shared = get_thread_shared_memory();
+    volatile struct queue_shared_memory *shared = get_queue_shared_memory();
     struct user_thread_info *thread_info = get_user_thread_info();
     INPUT_MESSAGE_SOURCE prev_source = thread_info->msg_source;
     struct received_message_info info, *old_info;
diff --git a/dlls/user32/user_main.c b/dlls/user32/user_main.c
index 2b62bafb7de..0f02eec738e 100644
--- a/dlls/user32/user_main.c
+++ b/dlls/user32/user_main.c
@@ -368,6 +368,13 @@ static void thread_detach(void)
         thread_info->desktop_shared_memory = NULL;
     }
 
+    if (thread_info->queue_shared_map)
+    {
+        CloseHandle( thread_info->queue_shared_map );
+        thread_info->queue_shared_map = NULL;
+        thread_info->queue_shared_memory = NULL;
+    }
+
     exiting_thread_id = 0;
 }
 
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index 74299781cef..eba164fde8b 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -206,8 +206,8 @@ struct user_thread_info
     struct rawinput_thread_data  *rawinput;               /* RawInput thread local data / buffer */
     HANDLE                        desktop_shared_map;     /* HANDLE to server's desktop shared memory */
     struct desktop_shared_memory *desktop_shared_memory;  /* Ptr to server's desktop shared memory */
-    HANDLE                        thread_shared_map;      /* HANDLE to server's thread shared memory */
-    struct thread_shared_memory  *thread_shared_memory;   /* Ptr to server's thread shared memory */
+    HANDLE                        queue_shared_map;       /* HANDLE to server's thread queue shared memory */
+    struct queue_shared_memory   *queue_shared_memory;     /* Ptr to server's thread queue shared memory */
 };
 
 C_ASSERT( sizeof(struct user_thread_info) <= sizeof(((TEB *)0)->Win32ClientInfo) );
@@ -293,7 +293,7 @@ extern BOOL WINPROC_call_window( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lPar
 extern const WCHAR *CLASS_GetVersionedName(const WCHAR *classname, UINT *basename_offset,
         WCHAR *combined, BOOL register_class) DECLSPEC_HIDDEN;
 extern volatile struct desktop_shared_memory *get_desktop_shared_memory( void ) DECLSPEC_HIDDEN;
-extern volatile struct thread_shared_memory *get_thread_shared_memory( void ) DECLSPEC_HIDDEN;
+extern volatile struct queue_shared_memory *get_queue_shared_memory( void ) DECLSPEC_HIDDEN;
 
 /* message spy definitions */
 
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index 8d384d3209d..67940f0bb97 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -160,19 +160,19 @@ volatile struct desktop_shared_memory *get_desktop_shared_memory( void )
 }
 
 
-volatile struct thread_shared_memory *get_thread_shared_memory( void )
+volatile struct queue_shared_memory *get_queue_shared_memory( void )
 {
     static const WCHAR dir_thread_mapsW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                              '\\','_','_','w','i','n','e','_','t','h','r','e','a','d','_','m','a','p','p','i','n','g','s',
-                                             '\\','%','0','8','x',0};
+                                             '\\','%','0','8','x','-','q','u','e','u','e',0};
     struct user_thread_info *thread_info = get_user_thread_info();
     WCHAR buf[MAX_PATH];
 
-    if (thread_info->thread_shared_memory) return thread_info->thread_shared_memory;
-    swprintf( buf, ARRAY_SIZE(buf), dir_thread_mapsW, GetCurrentThreadId() );
-    map_shared_memory_section( buf, sizeof(struct thread_shared_memory), NULL,
-                               &thread_info->thread_shared_map, (void **)&thread_info->thread_shared_memory );
-    return thread_info->thread_shared_memory;
+    if (thread_info->queue_shared_memory) return thread_info->queue_shared_memory;
+    swprintf( buf, ARRAY_SIZE(buf), dir_thread_mapsW, GetCurrentThreadId() );
+    map_shared_memory_section( buf, sizeof(struct queue_shared_memory), NULL,
+                               &thread_info->queue_shared_map, (void **)&thread_info->queue_shared_memory );
+    return thread_info->queue_shared_memory;
 }
 
 
diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 72636b2ce9b..6971fbdf6f9 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -815,7 +815,7 @@ struct desktop_shared_memory
     unsigned char        keystate[256];
 };
 
-struct thread_shared_memory
+struct queue_shared_memory
 {
     unsigned int         seq;
     unsigned int         wake_bits;
diff --git a/server/protocol.def b/server/protocol.def
index f7628301553..68f9a69d091 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -831,7 +831,7 @@ struct desktop_shared_memory
     unsigned char        keystate[256];    /* asynchronous key state */
 };
 
-struct thread_shared_memory
+struct queue_shared_memory
 {
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     unsigned int         wake_bits;
diff --git a/server/queue.c b/server/queue.c
index 585a2230654..d3510ec1d60 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -146,7 +146,7 @@ struct msg_queue
     int                    esync_in_msgwait; /* our thread is currently waiting on us */
     unsigned int           fsync_idx;
     int                    fsync_in_msgwait; /* our thread is currently waiting on us */
-    volatile struct thread_shared_memory *shared;  /* thread shared memory ptr */
+    volatile struct queue_shared_memory *shared;  /* thread queue shared memory ptr */
 };
 
 struct hotkey
@@ -320,7 +320,7 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
         queue->esync_in_msgwait = 0;
         queue->fsync_idx       = 0;
         queue->fsync_in_msgwait = 0;
-        queue->shared          = thread->shared;
+        queue->shared          = thread->queue_shared;
         list_init( &queue->send_result );
         list_init( &queue->callback_result );
         list_init( &queue->pending_timers );
diff --git a/server/thread.c b/server/thread.c
index fcde9a64ff9..93a66bbe9a7 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -387,8 +387,8 @@ static inline void init_thread_structure( struct thread *thread )
     thread->desc            = NULL;
     thread->desc_len        = 0;
     thread->exit_poll       = NULL;
-    thread->shared_mapping  = NULL;
-    thread->shared          = NULL;
+    thread->queue_shared_mapping = NULL;
+    thread->queue_shared         = NULL;
 
     thread->creation_time = current_time;
     thread->exit_time     = 0;
@@ -437,7 +437,7 @@ static struct context *create_thread_context( struct thread *thread )
 }
 
 
-static volatile void *init_thread_mapping( struct thread *thread )
+static volatile void *init_queue_mapping( struct thread *thread )
 {
     struct unicode_str name;
     struct object *dir = create_thread_map_directory();
@@ -446,16 +446,16 @@ static volatile void *init_thread_mapping( struct thread *thread )
 
     if (!dir) return NULL;
 
-    sprintf( nameA, "%08x", thread->id );
+    sprintf( nameA, "%08x-queue", thread->id );
     nameW = ascii_to_unicode_str( nameA, &name );
 
-    thread->shared_mapping = create_shared_mapping( dir, &name, sizeof(struct thread_shared_memory),
-                                                    NULL, (void **)&thread->shared );
+    thread->queue_shared_mapping = create_shared_mapping( dir, &name, sizeof(struct queue_shared_memory),
+                                                          NULL, (void **)&thread->queue_shared );
     release_object( dir );
-    if (thread->shared) memset( (void *)thread->shared, 0, sizeof(*thread->shared) );
+    if (thread->queue_shared) memset( (void *)thread->queue_shared, 0, sizeof(*thread->queue_shared) );
 
     free( nameW );
-    return thread->shared;
+    return thread->queue_shared;
 }
 
 
@@ -524,7 +524,7 @@ struct thread *create_thread( int fd, struct process *process, const struct secu
         release_object( thread );
         return NULL;
     }
-    if (!init_thread_mapping( thread ))
+    if (!init_queue_mapping( thread ))
     {
         release_object( thread );
         return NULL;
@@ -602,8 +602,8 @@ static void cleanup_thread( struct thread *thread )
         }
     }
     free( thread->desc );
-    if (thread->shared_mapping) release_object( thread->shared_mapping );
-    thread->shared_mapping = NULL;
+    if (thread->queue_shared_mapping) release_object( thread->queue_shared_mapping );
+    thread->queue_shared_mapping = NULL;
     thread->req_data = NULL;
     thread->reply_data = NULL;
     thread->request_fd = NULL;
diff --git a/server/thread.h b/server/thread.h
index 2ca9b6a61dc..d9b5ef4d51b 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -96,8 +96,8 @@ struct thread
     data_size_t            desc_len;      /* thread description length in bytes */
     WCHAR                 *desc;          /* thread description string */
     struct timeout_user   *exit_poll;     /* poll if the thread/process has exited already */
-    struct object         *shared_mapping;         /* thread shared memory mapping */
-    volatile struct thread_shared_memory *shared;  /* thread shared memory ptr */
+    struct object         *queue_shared_mapping; /* thread queue shared memory mapping */
+    volatile struct queue_shared_memory *queue_shared;  /* thread queue shared memory ptr */
 };
 
 extern struct thread *current;
From 41483a7b8df1b3fba23ae839dfde563021ef49ec Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 14 Jan 2021 15:22:05 +0100
Subject: [PATCH] server: Create thread input shared mapping.

---
 include/wine/server_protocol.h |  9 +++-
 server/protocol.def            |  7 +++
 server/queue.c                 | 97 ++++++++++++++++++++--------------
 server/thread.c                | 41 +++++++++++++-
 server/thread.h                |  2 +
 5 files changed, 113 insertions(+), 43 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 6971fbdf6f9..58631acaf1c 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -822,6 +822,13 @@ struct queue_shared_memory
     unsigned int         changed_bits;
     unsigned int         wake_mask;
     unsigned int         changed_mask;
+    thread_id_t          input_tid;
+};
+
+struct input_shared_memory
+{
+    unsigned int         seq;
+    thread_id_t          tid;
 };
 
 
diff --git a/server/protocol.def b/server/protocol.def
index 68f9a69d091..741000799d8 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -838,6 +838,13 @@ struct queue_shared_memory
     unsigned int         changed_bits;
     unsigned int         wake_mask;
     unsigned int         changed_mask;
+    thread_id_t          input_tid;
+};
+
+struct input_shared_memory
+{
+    unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
+    thread_id_t          tid;
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index d3510ec1d60..d1a30043a68 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -116,6 +116,8 @@ struct thread_input
     int                    lock_count;    /* lock counter for keystate */
     unsigned char          keystate[256]; /* state of each key */
     unsigned char          shadow_keystate[256]; /* shadow copy of keystate */
+    struct object         *shared_mapping; /* thread input shared memory mapping */
+    volatile struct input_shared_memory *shared;  /* thread input shared memory ptr */
 };
 
 struct msg_queue
@@ -244,6 +246,46 @@ static unsigned int cursor_history_latest;
 static void queue_hardware_message( struct desktop *desktop, struct message *msg, int always_queue );
 static void free_message( struct message *msg );
 
+#if defined(__i386__) || defined(__x86_64__)
+
+#define SHARED_WRITE_BEGIN( x )                                  \
+    do {                                                         \
+        volatile unsigned int __seq = *(x);                      \
+        assert( (__seq & SEQUENCE_MASK) != SEQUENCE_MASK );      \
+        *(x) = ++__seq;                                          \
+    } while(0)
+
+#define SHARED_WRITE_END( x )                                    \
+    do {                                                         \
+        volatile unsigned int __seq = *(x);                      \
+        assert( (__seq & SEQUENCE_MASK) != 0 );                  \
+        if ((__seq & SEQUENCE_MASK) > 1) __seq--;                \
+        else __seq += SEQUENCE_MASK;                             \
+        *(x) = __seq;                                            \
+    } while(0)
+
+#else
+
+#define SHARED_WRITE_BEGIN( x )                                         \
+    do {                                                                \
+        assert( (*(x) & SEQUENCE_MASK) != SEQUENCE_MASK );              \
+        if ((__atomic_add_fetch( x, 1, __ATOMIC_RELAXED ) & SEQUENCE_MASK) == 1) \
+            __atomic_thread_fence( __ATOMIC_RELEASE );                  \
+    } while(0)
+
+#define SHARED_WRITE_END( x )                                           \
+    do {                                                                \
+        assert( (*(x) & SEQUENCE_MASK) != 0 );                          \
+        if ((*(x) & SEQUENCE_MASK) > 1)                                 \
+            __atomic_sub_fetch( x, 1, __ATOMIC_RELAXED );               \
+        else {                                                          \
+            __atomic_thread_fence( __ATOMIC_RELEASE );                  \
+            __atomic_add_fetch( x, SEQUENCE_MASK, __ATOMIC_RELAXED );   \
+        }                                                               \
+    } while(0)
+
+#endif
+
 /* set the caret window in a given thread input */
 static void set_caret_window( struct thread_input *input, user_handle_t win )
 {
@@ -266,6 +308,8 @@ static struct thread_input *create_thread_input( struct thread *thread )
 
     if ((input = alloc_object( &thread_input_ops )))
     {
+        input->shared_mapping = grab_object( thread->input_shared_mapping );
+        input->shared = thread->input_shared;
         input->focus        = 0;
         input->capture      = 0;
         input->active       = 0;
@@ -335,7 +379,13 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
 
         thread->queue = queue;
     }
-    if (new_input) release_object( new_input );
+    if (new_input)
+    {
+        SHARED_WRITE_BEGIN( &queue->shared->seq );
+        queue->shared->input_tid = new_input->shared->tid;
+        SHARED_WRITE_END( &queue->shared->seq );
+        release_object( new_input );
+    }
     return queue;
 }
 
@@ -365,6 +415,10 @@ static int assign_thread_input( struct thread *thread, struct thread_input *new_
     }
     queue->input = (struct thread_input *)grab_object( new_input );
     new_input->cursor_count += queue->cursor_count;
+
+    SHARED_WRITE_BEGIN( &queue->shared->seq );
+    queue->shared->input_tid = queue->input->shared->tid;
+    SHARED_WRITE_END( &queue->shared->seq );
     return 1;
 }
 
@@ -393,46 +447,6 @@ static struct message *alloc_hardware_message( lparam_t info, struct hw_msg_sour
     return msg;
 }
 
-#if defined(__i386__) || defined(__x86_64__)
-
-#define SHARED_WRITE_BEGIN( x )                                  \
-    do {                                                         \
-        volatile unsigned int __seq = *(x);                      \
-        assert( (__seq & SEQUENCE_MASK) != SEQUENCE_MASK );      \
-        *(x) = ++__seq;                                          \
-    } while(0)
-
-#define SHARED_WRITE_END( x )                                    \
-    do {                                                         \
-        volatile unsigned int __seq = *(x);                      \
-        assert( (__seq & SEQUENCE_MASK) != 0 );                  \
-        if ((__seq & SEQUENCE_MASK) > 1) __seq--;                \
-        else __seq += SEQUENCE_MASK;                             \
-        *(x) = __seq;                                            \
-    } while(0)
-
-#else
-
-#define SHARED_WRITE_BEGIN( x )                                         \
-    do {                                                                \
-        assert( (*(x) & SEQUENCE_MASK) != SEQUENCE_MASK );              \
-        if ((__atomic_add_fetch( x, 1, __ATOMIC_RELAXED ) & SEQUENCE_MASK) == 1) \
-            __atomic_thread_fence( __ATOMIC_RELEASE );                  \
-    } while(0)
-
-#define SHARED_WRITE_END( x )                                           \
-    do {                                                                \
-        assert( (*(x) & SEQUENCE_MASK) != 0 );                          \
-        if ((*(x) & SEQUENCE_MASK) > 1)                                 \
-            __atomic_sub_fetch( x, 1, __ATOMIC_RELAXED );               \
-        else {                                                          \
-            __atomic_thread_fence( __ATOMIC_RELEASE );                  \
-            __atomic_add_fetch( x, SEQUENCE_MASK, __ATOMIC_RELAXED );   \
-        }                                                               \
-    } while(0)
-
-#endif
-
 static int update_desktop_cursor_pos( struct desktop *desktop, int x, int y )
 {
     int updated;
@@ -1175,6 +1189,7 @@ static void thread_input_destroy( struct object *obj )
         if (input->desktop->foreground_input == input) set_foreground_input( input->desktop, NULL );
         release_object( input->desktop );
     }
+    release_object( input->shared_mapping );
 }
 
 /* fix the thread input data when a window is destroyed */
diff --git a/server/thread.c b/server/thread.c
index 93a66bbe9a7..74269b05a63 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -389,6 +389,8 @@ static inline void init_thread_structure( struct thread *thread )
     thread->desc_len        = 0;
     thread->queue_shared_mapping = NULL;
     thread->queue_shared         = NULL;
+    thread->input_shared_mapping = NULL;
+    thread->input_shared         = NULL;
 
     thread->creation_time = current_time;
     thread->exit_time     = 0;
@@ -452,13 +454,43 @@ static volatile void *init_queue_mapping( struct thread *thread )
     thread->queue_shared_mapping = create_shared_mapping( dir, &name, sizeof(struct queue_shared_memory),
                                                           NULL, (void **)&thread->queue_shared );
     release_object( dir );
-    if (thread->queue_shared) memset( (void *)thread->queue_shared, 0, sizeof(*thread->queue_shared) );
+    if (thread->queue_shared)
+    {
+        memset( (void *)thread->queue_shared, 0, sizeof(*thread->queue_shared) );
+        thread->queue_shared->input_tid = thread->id;
+    }
 
     free( nameW );
     return thread->queue_shared;
 }
 
 
+static volatile void *init_input_mapping( struct thread *thread )
+{
+    struct unicode_str name;
+    struct object *dir = create_thread_map_directory();
+    char nameA[MAX_PATH];
+    WCHAR *nameW;
+
+    if (!dir) return NULL;
+
+    sprintf( nameA, "%08x-input", thread->id );
+    nameW = ascii_to_unicode_str( nameA, &name );
+
+    thread->input_shared_mapping = create_shared_mapping( dir, &name, sizeof(struct input_shared_memory),
+                                                          NULL, (void **)&thread->input_shared );
+    release_object( dir );
+    if (thread->input_shared)
+    {
+        memset( (void *)thread->input_shared, 0, sizeof(*thread->input_shared) );
+        thread->input_shared->tid = thread->id;
+    }
+
+    free( nameW );
+    return thread->input_shared;
+}
+
+
 /* create a new thread */
 struct thread *create_thread( int fd, struct process *process, const struct security_descriptor *sd )
 {
@@ -529,6 +561,11 @@ struct thread *create_thread( int fd, struct process *process, const struct secu
         release_object( thread );
         return NULL;
     }
+    if (!init_input_mapping( thread ))
+    {
+        release_object( thread );
+        return NULL;
+    }
 
     if (do_fsync())
     {
@@ -604,6 +641,8 @@ static void cleanup_thread( struct thread *thread )
     free( thread->desc );
     if (thread->queue_shared_mapping) release_object( thread->queue_shared_mapping );
     thread->queue_shared_mapping = NULL;
+    if (thread->input_shared_mapping) release_object( thread->input_shared_mapping );
+    thread->input_shared_mapping = NULL;
     thread->req_data = NULL;
     thread->reply_data = NULL;
     thread->request_fd = NULL;
diff --git a/server/thread.h b/server/thread.h
index d9b5ef4d51b..45bdd0ac5e2 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -98,6 +98,8 @@ struct thread
     WCHAR                 *desc;          /* thread description string */
     struct object         *queue_shared_mapping; /* thread queue shared memory mapping */
     volatile struct queue_shared_memory *queue_shared;  /* thread queue shared memory ptr */
+    struct object         *input_shared_mapping; /* thread input shared memory mapping */
+    volatile struct input_shared_memory *input_shared;  /* thread input shared memory ptr */
 };
 
 extern struct thread *current;
From 75f4b89afcfb249c578c19ada031b1d8558992b0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 17:35:50 +0100
Subject: [PATCH] server: Move active window to input shared memory.

---
 include/wine/server_protocol.h |  3 ++-
 server/protocol.def            |  1 +
 server/queue.c                 | 44 +++++++++++++++++++++-------------
 3 files changed, 31 insertions(+), 17 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 58631acaf1c..da17dee73cb 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -829,6 +829,7 @@ struct input_shared_memory
 {
     unsigned int         seq;
     thread_id_t          tid;
+    user_handle_t        active;
 };
 
 
diff --git a/server/protocol.def b/server/protocol.def
index 741000799d8..e00e85441e8 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -845,6 +845,7 @@ struct input_shared_memory
 {
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     thread_id_t          tid;
+    user_handle_t        active;           /* handle to the active window */
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index d1a30043a68..78cc11acfa5 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -105,7 +105,6 @@ struct thread_input
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
     user_handle_t          focus;         /* focus window */
     user_handle_t          capture;       /* capture window */
-    user_handle_t          active;        /* active window */
     user_handle_t          menu_owner;    /* current menu owner window */
     user_handle_t          move_size;     /* current moving/resizing window */
     user_handle_t          caret;         /* caret window */
@@ -307,13 +307,15 @@ static struct thread_input *create_thread_input( struct thread *thread )
     {
         input->shared_mapping = grab_object( thread->input_shared_mapping );
         input->shared = thread->input_shared;
+        SHARED_WRITE_BEGIN( &input->shared->seq );
         input->focus        = 0;
         input->capture      = 0;
-        input->active       = 0;
+        input->shared->active       = 0;
         input->menu_owner   = 0;
         input->move_size    = 0;
         input->cursor       = 0;
         input->cursor_count = 0;
+        SHARED_WRITE_END( &input->shared->seq );
         input->lock_count   = 0;
         list_init( &input->msg_list );
         set_caret_window( input, 0 );
@@ -1176,7 +1177,7 @@ static void thread_input_dump( struct object *obj, int verbose )
 {
     struct thread_input *input = (struct thread_input *)obj;
     fprintf( stderr, "Thread input focus=%08x capture=%08x active=%08x\n",
-             input->focus, input->capture, input->active );
+             input->focus, input->capture, input->shared->active );
 }
 
 static void thread_input_destroy( struct object *obj )
@@ -1197,12 +1198,14 @@ static inline void thread_input_cleanup_window( struct msg_queue *queue, user_ha
 {
     struct thread_input *input = queue->input;
 
+    SHARED_WRITE_BEGIN( &input->shared->seq );
     if (window == input->focus) input->focus = 0;
     if (window == input->capture) input->capture = 0;
-    if (window == input->active) input->active = 0;
+    if (window == input->shared->active) input->shared->active = 0;
     if (window == input->menu_owner) input->menu_owner = 0;
     if (window == input->move_size) input->move_size = 0;
     if (window == input->caret) set_caret_window( input, 0 );
+    SHARED_WRITE_END( &input->shared->seq );
 }
 
 /* check if the specified window can be set in the input data of a given queue */
@@ -1235,7 +1238,7 @@ int init_thread_queue( struct thread *thread )
 int attach_thread_input( struct thread *thread_from, struct thread *thread_to )
 {
     struct desktop *desktop;
-    struct thread_input *input;
+    struct thread_input *input, *old_input;
     int ret;
 
     if (!thread_to->queue && !(thread_to->queue = create_msg_queue( thread_to, NULL ))) return 0;
@@ -1252,8 +1255,11 @@ int attach_thread_input( struct thread *thread_from, struct thread *thread_to )
 
     if (thread_from->queue)
     {
-        if (!input->focus) input->focus = thread_from->queue->input->focus;
-        if (!input->active) input->active = thread_from->queue->input->active;
+        SHARED_WRITE_BEGIN( &input->shared->seq );
+        old_input = thread_from->queue->input;
+        if (!input->focus) input->focus = old_input->focus;
+        if (!input->shared->active) input->shared->active = old_input->shared->active;
+        SHARED_WRITE_END( &input->shared->seq );
     }
 
     ret = assign_thread_input( thread_from, input );
@@ -1279,12 +1285,16 @@ void detach_thread_input( struct thread *thread_from )
             }
             release_object( thread );
         }
-        if (old_input->active && (thread = get_window_thread( old_input->active )))
+        if (old_input->shared->active && (thread = get_window_thread( old_input->shared->active )))
         {
             if (thread == thread_from)
             {
-                input->active = old_input->active;
-                old_input->active = 0;
+                SHARED_WRITE_BEGIN( &input->shared->seq );
+                input->shared->active = old_input->shared->active;
+                SHARED_WRITE_END( &input->shared->seq );
+                SHARED_WRITE_BEGIN( &old_input->shared->seq );
+                old_input->shared->active = 0;
+                SHARED_WRITE_END( &old_input->shared->seq );
             }
             release_object( thread );
         }
@@ -1610,7 +1620,7 @@ static user_handle_t find_hardware_message_window( struct desktop *desktop, stru
     {
         if (input && !(win = input->focus))
         {
-            win = input->active;
+            win = input->shared->active;
             if (*msg_code < WM_SYSKEYDOWN) *msg_code += WM_SYSKEYDOWN - WM_KEYDOWN;
         }
     }
@@ -3184,7 +3194,7 @@ DECL_HANDLER(get_thread_input)
     {
         reply->focus      = input->focus;
         reply->capture    = input->capture;
-        reply->active     = input->active;
+        reply->active     = input->shared->active;
         reply->menu_owner = input->menu_owner;
         reply->move_size  = input->move_size;
         reply->caret      = input->caret;
@@ -3194,7 +3204,7 @@ DECL_HANDLER(get_thread_input)
     }
 
     /* foreground window is active window of foreground thread */
-    reply->foreground = desktop->foreground_input ? desktop->foreground_input->active : 0;
+    reply->foreground = desktop->foreground_input ? desktop->foreground_input->shared->active : 0;
     if (thread) release_object( thread );
     release_object( desktop );
 }
@@ -3285,7 +3295,7 @@ DECL_HANDLER(set_foreground_window)
     struct msg_queue *queue = get_current_queue();
 
     if (!(desktop = get_thread_desktop( current, 0 ))) return;
-    reply->previous = desktop->foreground_input ? desktop->foreground_input->active : 0;
+    reply->previous = desktop->foreground_input ? desktop->foreground_input->shared->active : 0;
     reply->send_msg_old = (reply->previous && desktop->foreground_input != queue->input);
     reply->send_msg_new = FALSE;
 
@@ -3327,8 +3337,10 @@ DECL_HANDLER(set_active_window)
     {
         if (!req->handle || make_window_active( req->handle ))
         {
-            reply->previous = queue->input->active;
-            queue->input->active = get_user_full_handle( req->handle );
+            reply->previous = queue->input->shared->active;
+            SHARED_WRITE_BEGIN( &queue->input->shared->seq );
+            queue->input->shared->active = get_user_full_handle( req->handle );
+            SHARED_WRITE_END( &queue->input->shared->seq );
         }
         else set_error( STATUS_INVALID_HANDLE );
     }
From 1dbb153da61431fa51ab9ec3184db96ce01cd7ae Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 14 Jan 2021 15:22:05 +0100
Subject: [PATCH] user32: Use input shared memory for GetActiveWindow.

---
 dlls/user32/focus.c        |  8 ++++----
 dlls/user32/user_main.c    |  7 +++++++
 dlls/user32/user_private.h |  3 +++
 dlls/user32/winstation.c   | 35 +++++++++++++++++++++++++++++++++++
 4 files changed, 49 insertions(+), 4 deletions(-)

diff --git a/dlls/user32/focus.c b/dlls/user32/focus.c
index 50b3323ae9f..04d9baab948 100644
--- a/dlls/user32/focus.c
+++ b/dlls/user32/focus.c
@@ -333,14 +333,14 @@ BOOL WINAPI SetForegroundWindow( HWND hwnd )
  */
 HWND WINAPI GetActiveWindow(void)
 {
+    volatile struct input_shared_memory *shared = get_input_shared_memory();
     HWND ret = 0;
 
-    SERVER_START_REQ( get_thread_input )
+    SHARED_READ_BEGIN( &shared->seq )
     {
-        req->tid = GetCurrentThreadId();
-        if (!wine_server_call_err( req )) ret = wine_server_ptr_handle( reply->active );
+        ret = wine_server_ptr_handle( shared->active );
     }
-    SERVER_END_REQ;
+    SHARED_READ_END( &shared->seq );
     return ret;
 }
 
diff --git a/dlls/user32/user_main.c b/dlls/user32/user_main.c
index 0f02eec738e..29df770c4b1 100644
--- a/dlls/user32/user_main.c
+++ b/dlls/user32/user_main.c
@@ -398,6 +398,13 @@ static void thread_detach(void)
         thread_info->queue_shared_memory = NULL;
     }
 
+    if (thread_info->input_shared_map)
+    {
+        CloseHandle( thread_info->input_shared_map );
+        thread_info->input_shared_map = NULL;
+        thread_info->input_shared_memory = NULL;
+    }
+
     exiting_thread_id = 0;
 }
 
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index eba164fde8b..14420e88f66 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -208,6 +208,8 @@ struct user_thread_info
     struct desktop_shared_memory *desktop_shared_memory;  /* Ptr to server's desktop shared memory */
     HANDLE                        queue_shared_map;       /* HANDLE to server's thread queue shared memory */
     struct queue_shared_memory   *queue_shared_memory;     /* Ptr to server's thread queue shared memory */
+    HANDLE                        input_shared_map;       /* HANDLE to server's thread input shared memory */
+    struct input_shared_memory   *input_shared_memory;     /* Ptr to server's thread input shared memory */
 };
 
 C_ASSERT( sizeof(struct user_thread_info) <= sizeof(((TEB *)0)->Win32ClientInfo) );
@@ -294,6 +296,7 @@ extern const WCHAR *CLASS_GetVersionedName(const WCHAR *classname, UINT *basenam
         WCHAR *combined, BOOL register_class) DECLSPEC_HIDDEN;
 extern volatile struct desktop_shared_memory *get_desktop_shared_memory( void ) DECLSPEC_HIDDEN;
 extern volatile struct queue_shared_memory *get_queue_shared_memory( void ) DECLSPEC_HIDDEN;
+extern volatile struct input_shared_memory *get_input_shared_memory( void ) DECLSPEC_HIDDEN;
 
 /* message spy definitions */
 
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index 67940f0bb97..b6d206d5606 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -181,6 +181,41 @@ volatile struct queue_shared_memory *get_queue_shared_memory( void )
 }
 
 
+static volatile struct input_shared_memory *get_thread_input_shared_memory( DWORD tid, HANDLE *handle,
+                                                                            struct input_shared_memory **ptr )
+{
+    static const WCHAR dir_thread_mapsW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
+                                             '\\','_','_','w','i','n','e','_','t','h','r','e','a','d','_','m','a','p','p','i','n','g','s',
+                                             '\\','%','0','8','x','-','i','n','p','u','t',0};
+    WCHAR buf[MAX_PATH];
+
+    if (*ptr && (*ptr)->tid == tid) return *ptr;
+    if (*ptr) CloseHandle( *handle );
+
+    swprintf( buf, ARRAY_SIZE(buf), dir_thread_mapsW, tid );
+    map_shared_memory_section( buf, sizeof(struct input_shared_memory), NULL,
+                               handle, (void **)ptr );
+    return *ptr;
+}
+
+
+volatile struct input_shared_memory *get_input_shared_memory( void )
+{
+    volatile struct queue_shared_memory *queue = get_queue_shared_memory();
+    struct user_thread_info *thread_info = get_user_thread_info();
+    DWORD tid;
+
+    SHARED_READ_BEGIN( &queue->seq )
+    {
+        tid = queue->input_tid;
+    }
+    SHARED_READ_END( &queue->seq );
+
+    return get_thread_input_shared_memory( tid, &thread_info->input_shared_map,
+                                           &thread_info->input_shared_memory );
+}
+
+
 /***********************************************************************
  *              CreateWindowStationA  (USER32.@)
  */
From 9b93208ed639d6c068270e0f16400fd83487b638 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 22:09:12 +0100
Subject: [PATCH] server: Move focus window to input shared memory.

---
 include/wine/server_protocol.h |  3 ++-
 server/protocol.def            |  1 +
 server/queue.c                 | 33 +++++++++++++++++++--------------
 3 files changed, 22 insertions(+), 15 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index da17dee73cb..34112f55372 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -829,6 +829,7 @@ struct input_shared_memory
 {
     unsigned int         seq;
     thread_id_t          tid;
+    user_handle_t        focus;
     user_handle_t        active;
 };
 
diff --git a/server/protocol.def b/server/protocol.def
index e00e85441e8..57c05909764 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -845,6 +845,7 @@ struct input_shared_memory
 {
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     thread_id_t          tid;
+    user_handle_t        focus;            /* handle to the focus window */
     user_handle_t        active;           /* handle to the active window */
 };
 
diff --git a/server/queue.c b/server/queue.c
index 78cc11acfa5..06a132abd5e 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -103,7 +103,6 @@ struct thread_input
 {
     struct object          obj;           /* object header */
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
-    user_handle_t          focus;         /* focus window */
     user_handle_t          capture;       /* capture window */
     user_handle_t          menu_owner;    /* current menu owner window */
     user_handle_t          move_size;     /* current moving/resizing window */
@@ -310,7 +309,7 @@ static struct thread_input *create_thread_input( struct thread *thread )
         input->shared_mapping = grab_object( thread->input_shared_mapping );
         input->shared = thread->input_shared;
         SHARED_WRITE_BEGIN( &input->shared->seq );
-        input->focus        = 0;
+        input->shared->focus        = 0;
         input->capture      = 0;
         input->shared->active       = 0;
         input->menu_owner   = 0;
@@ -1177,7 +1176,7 @@ static void thread_input_dump( struct object *obj, int verbose )
 {
     struct thread_input *input = (struct thread_input *)obj;
     fprintf( stderr, "Thread input focus=%08x capture=%08x active=%08x\n",
-             input->focus, input->capture, input->shared->active );
+             input->shared->focus, input->capture, input->shared->active );
 }
 
 static void thread_input_destroy( struct object *obj )
@@ -1199,7 +1198,7 @@ static inline void thread_input_cleanup_window( struct msg_queue *queue, user_ha
     struct thread_input *input = queue->input;
 
     SHARED_WRITE_BEGIN( &input->shared->seq );
-    if (window == input->focus) input->focus = 0;
+    if (window == input->shared->focus) input->shared->focus = 0;
     if (window == input->capture) input->capture = 0;
     if (window == input->shared->active) input->shared->active = 0;
     if (window == input->menu_owner) input->menu_owner = 0;
@@ -1257,7 +1256,7 @@ int attach_thread_input( struct thread *thread_from, struct thread *thread_to )
     {
         SHARED_WRITE_BEGIN( &input->shared->seq );
         old_input = thread_from->queue->input;
-        if (!input->focus) input->focus = old_input->focus;
+        if (!input->shared->focus) input->shared->focus = old_input->shared->focus;
         if (!input->shared->active) input->shared->active = old_input->shared->active;
         SHARED_WRITE_END( &input->shared->seq );
     }
@@ -1276,12 +1275,16 @@ void detach_thread_input( struct thread *thread_from )
 
     if ((input = create_thread_input( thread_from )))
     {
-        if (old_input->focus && (thread = get_window_thread( old_input->focus )))
+        if (old_input->shared->focus && (thread = get_window_thread( old_input->shared->focus )))
         {
             if (thread == thread_from)
             {
-                input->focus = old_input->focus;
-                old_input->focus = 0;
+                SHARED_WRITE_BEGIN( &input->shared->seq );
+                input->shared->focus = old_input->shared->focus;
+                SHARED_WRITE_END( &input->shared->seq );
+                SHARED_WRITE_BEGIN( &old_input->shared->seq );
+                old_input->shared->focus = 0;
+                SHARED_WRITE_END( &old_input->shared->seq );
             }
             release_object( thread );
         }
@@ -1614,11 +1617,11 @@ static user_handle_t find_hardware_message_window( struct desktop *desktop, stru
     *msg_code = msg->msg;
     if (msg->msg == WM_INPUT)
     {
-        if (!(win = msg->win) && input) win = input->focus;
+        if (!(win = msg->win) && input) win = input->shared->focus;
     }
     else if (is_keyboard_msg( msg ))
     {
-        if (input && !(win = input->focus))
+        if (input && !(win = input->shared->focus))
         {
             win = input->shared->active;
             if (*msg_code < WM_SYSKEYDOWN) *msg_code += WM_SYSKEYDOWN - WM_KEYDOWN;
@@ -1798,7 +1801,7 @@ static int send_hook_ll_message( struct desktop *desktop, struct message *hardwa
 static struct thread *get_foreground_thread( struct desktop *desktop, user_handle_t window )
 {
     /* if desktop has no foreground process, assume the receiving window is */
-    if (desktop->foreground_input) return get_window_thread( desktop->foreground_input->focus );
+    if (desktop->foreground_input) return get_window_thread( desktop->foreground_input->shared->focus );
     if (window) return get_window_thread( window );
     return NULL;
 }
@@ -3192,7 +3195,7 @@ DECL_HANDLER(get_thread_input)
 
     if (input)
     {
-        reply->focus      = input->focus;
+        reply->focus      = input->shared->focus;
         reply->capture    = input->capture;
         reply->active     = input->shared->active;
         reply->menu_owner = input->menu_owner;
@@ -3321,8 +3324,10 @@ DECL_HANDLER(set_focus_window)
     reply->previous = 0;
     if (queue && check_queue_input_window( queue, req->handle ))
     {
-        reply->previous = queue->input->focus;
-        queue->input->focus = get_user_full_handle( req->handle );
+        reply->previous = queue->input->shared->focus;
+        SHARED_WRITE_BEGIN( &queue->input->shared->seq );
+        queue->input->shared->focus = get_user_full_handle( req->handle );
+        SHARED_WRITE_END( &queue->input->shared->seq );
     }
 }
 
From 72304a7813763cec943251a33aa9cae91fee4de8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 17:48:47 +0100
Subject: [PATCH] user32: Use input shared memory for GetFocus.

---
 dlls/user32/focus.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/dlls/user32/focus.c b/dlls/user32/focus.c
index 04d9baab948..4812cbdd292 100644
--- a/dlls/user32/focus.c
+++ b/dlls/user32/focus.c
@@ -350,14 +350,14 @@ HWND WINAPI GetActiveWindow(void)
  */
 HWND WINAPI GetFocus(void)
 {
+    volatile struct input_shared_memory *shared = get_input_shared_memory();
     HWND ret = 0;
 
-    SERVER_START_REQ( get_thread_input )
+    SHARED_READ_BEGIN( &shared->seq )
     {
-        req->tid = GetCurrentThreadId();
-        if (!wine_server_call_err( req )) ret = wine_server_ptr_handle( reply->focus );
+        ret = wine_server_ptr_handle( shared->focus );
     }
-    SERVER_END_REQ;
+    SHARED_READ_END( &shared->seq );
     return ret;
 }
 
From 2a610aed4152980b7b94951464507e9340ea8cc2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 17:58:36 +0100
Subject: [PATCH] server: Add foreground TID to desktop shared memory.

---
 include/wine/server_protocol.h | 3 ++-
 server/protocol.def            | 1 +
 server/queue.c                 | 3 +++
 3 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 34112f55372..af9eb227455 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -813,6 +813,7 @@ struct desktop_shared_memory
     unsigned int         seq;
     struct shared_cursor cursor;
     unsigned char        keystate[256];
+    thread_id_t          foreground_tid;
 };
 
 struct queue_shared_memory
diff --git a/server/protocol.def b/server/protocol.def
index 57c05909764..f875d11ad57 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -829,6 +829,7 @@ struct desktop_shared_memory
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     struct shared_cursor cursor;           /* global cursor information */
     unsigned char        keystate[256];    /* asynchronous key state */
+    thread_id_t          foreground_tid;   /* tid of the foreground thread */
 };
 
 struct queue_shared_memory
diff --git a/server/queue.c b/server/queue.c
index 06a132abd5e..2cc4014499d 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -533,6 +533,9 @@ static void set_foreground_input( struct desktop *desktop, struct thread_input *
     if (desktop->foreground_input == input) return;
     set_clip_rectangle( desktop, NULL, 1 );
     desktop->foreground_input = input;
+    SHARED_WRITE_BEGIN( &desktop->shared->seq );
+    desktop->shared->foreground_tid = input ? input->shared->tid : 0;
+    SHARED_WRITE_END( &desktop->shared->seq );
 }
 
 /* get the hook table for a given thread */
From c1f5d7c2fc8b2616f9a24396e949cc626bd599db Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 17:58:36 +0100
Subject: [PATCH] user32: Use desktop shared memory for GetForegroundWindow.

---
 dlls/user32/focus.c        |  9 +++++----
 dlls/user32/user_main.c    |  7 +++++++
 dlls/user32/user_private.h |  3 +++
 dlls/user32/winstation.c   | 18 ++++++++++++++++++
 4 files changed, 33 insertions(+), 4 deletions(-)

diff --git a/dlls/user32/focus.c b/dlls/user32/focus.c
index 4812cbdd292..727a04ae5a6 100644
--- a/dlls/user32/focus.c
+++ b/dlls/user32/focus.c
@@ -367,14 +367,15 @@ HWND WINAPI GetFocus(void)
  */
 HWND WINAPI GetForegroundWindow(void)
 {
+    volatile struct input_shared_memory *shared = get_foreground_shared_memory();
     HWND ret = 0;
 
-    SERVER_START_REQ( get_thread_input )
+    if (!shared) return 0;
+    SHARED_READ_BEGIN( &shared->seq )
     {
-        req->tid = 0;
-        if (!wine_server_call_err( req )) ret = wine_server_ptr_handle( reply->foreground );
+        ret = wine_server_ptr_handle( shared->active );
     }
-    SERVER_END_REQ;
+    SHARED_READ_END( &shared->seq );
     return ret;
 }
 
diff --git a/dlls/user32/user_main.c b/dlls/user32/user_main.c
index 29df770c4b1..1139f5a049a 100644
--- a/dlls/user32/user_main.c
+++ b/dlls/user32/user_main.c
@@ -405,6 +405,13 @@ static void thread_detach(void)
         thread_info->input_shared_memory = NULL;
     }
 
+    if (thread_info->foreground_shared_memory)
+    {
+        CloseHandle( thread_info->foreground_shared_map );
+        thread_info->foreground_shared_map = NULL;
+        thread_info->foreground_shared_memory = NULL;
+    }
+
     exiting_thread_id = 0;
 }
 
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index 14420e88f66..67d50b3daaa 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -210,6 +210,8 @@ struct user_thread_info
     struct queue_shared_memory   *queue_shared_memory;     /* Ptr to server's thread queue shared memory */
     HANDLE                        input_shared_map;       /* HANDLE to server's thread input shared memory */
     struct input_shared_memory   *input_shared_memory;     /* Ptr to server's thread input shared memory */
+    HANDLE                        foreground_shared_map;    /* HANDLE to server's thread input shared memory */
+    struct input_shared_memory   *foreground_shared_memory; /* Ptr to server's thread input shared memory */
 };
 
 C_ASSERT( sizeof(struct user_thread_info) <= sizeof(((TEB *)0)->Win32ClientInfo) );
@@ -297,6 +299,7 @@ extern const WCHAR *CLASS_GetVersionedName(const WCHAR *classname, UINT *basenam
 extern volatile struct desktop_shared_memory *get_desktop_shared_memory( void ) DECLSPEC_HIDDEN;
 extern volatile struct queue_shared_memory *get_queue_shared_memory( void ) DECLSPEC_HIDDEN;
 extern volatile struct input_shared_memory *get_input_shared_memory( void ) DECLSPEC_HIDDEN;
+extern volatile struct input_shared_memory *get_foreground_shared_memory( void ) DECLSPEC_HIDDEN;
 
 /* message spy definitions */
 
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index b6d206d5606..ccc6e28328b 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -216,6 +216,24 @@ volatile struct input_shared_memory *get_input_shared_memory( void )
 }
 
 
+volatile struct input_shared_memory *get_foreground_shared_memory( void )
+{
+    volatile struct desktop_shared_memory *desktop = get_desktop_shared_memory();
+    struct user_thread_info *thread_info = get_user_thread_info();
+    DWORD tid;
+
+    SHARED_READ_BEGIN( &desktop->seq )
+    {
+        tid = desktop->foreground_tid;
+    }
+    SHARED_READ_END( &desktop->seq );
+
+    if (!tid) return NULL;
+    return get_thread_input_shared_memory( tid, &thread_info->foreground_shared_map,
+                                           &thread_info->foreground_shared_memory );
+}
+
+
 /***********************************************************************
  *              CreateWindowStationA  (USER32.@)
  */
From 10195561c9d8c7847416df4f2f8780f4c0114365 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 22:10:36 +0100
Subject: [PATCH] server: Move capture window to input shared memory.

As well as menu owner / menu size window handles.
---
 include/wine/server_protocol.h |  5 ++++-
 server/protocol.def            |  3 +++
 server/queue.c                 | 39 +++++++++++++++++-----------------
 3 files changed, 26 insertions(+), 21 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index af9eb227455..0e3b63afdf3 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -831,7 +831,10 @@ struct input_shared_memory
     unsigned int         seq;
     thread_id_t          tid;
     user_handle_t        focus;
+    user_handle_t        capture;
     user_handle_t        active;
+    user_handle_t        menu_owner;
+    user_handle_t        move_size;
 };
 
 
diff --git a/server/protocol.def b/server/protocol.def
index f875d11ad57..6e19902bdd6 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -847,7 +847,10 @@ struct input_shared_memory
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     thread_id_t          tid;
     user_handle_t        focus;            /* handle to the focus window */
+    user_handle_t        capture;          /* handle to the capture window */
     user_handle_t        active;           /* handle to the active window */
+    user_handle_t        menu_owner;       /* handle to the menu owner */
+    user_handle_t        move_size;        /* handle to the moving/resizing window */
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index 2cc4014499d..452d4487418 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -103,9 +103,6 @@ struct thread_input
 {
     struct object          obj;           /* object header */
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
-    user_handle_t          capture;       /* capture window */
-    user_handle_t          menu_owner;    /* current menu owner window */
-    user_handle_t          move_size;     /* current moving/resizing window */
     user_handle_t          caret;         /* caret window */
     rectangle_t            caret_rect;    /* caret rectangle */
     int                    caret_hide;    /* caret hide count */
@@ -310,10 +307,10 @@ static struct thread_input *create_thread_input( struct thread *thread )
         input->shared = thread->input_shared;
         SHARED_WRITE_BEGIN( &input->shared->seq );
         input->shared->focus        = 0;
-        input->capture      = 0;
+        input->shared->capture      = 0;
         input->shared->active       = 0;
-        input->menu_owner   = 0;
-        input->move_size    = 0;
+        input->shared->menu_owner   = 0;
+        input->shared->move_size    = 0;
         input->cursor       = 0;
         input->cursor_count = 0;
         SHARED_WRITE_END( &input->shared->seq );
@@ -1179,7 +1176,7 @@ static void thread_input_dump( struct object *obj, int verbose )
 {
     struct thread_input *input = (struct thread_input *)obj;
     fprintf( stderr, "Thread input focus=%08x capture=%08x active=%08x\n",
-             input->shared->focus, input->capture, input->shared->active );
+             input->shared->focus, input->shared->capture, input->shared->active );
 }
 
 static void thread_input_destroy( struct object *obj )
@@ -1202,10 +1199,10 @@ static inline void thread_input_cleanup_window( struct msg_queue *queue, user_ha
 
     SHARED_WRITE_BEGIN( &input->shared->seq );
     if (window == input->shared->focus) input->shared->focus = 0;
-    if (window == input->capture) input->capture = 0;
+    if (window == input->shared->capture) input->shared->capture = 0;
     if (window == input->shared->active) input->shared->active = 0;
-    if (window == input->menu_owner) input->menu_owner = 0;
-    if (window == input->move_size) input->move_size = 0;
+    if (window == input->shared->menu_owner) input->shared->menu_owner = 0;
+    if (window == input->shared->move_size) input->shared->move_size = 0;
     if (window == input->caret) set_caret_window( input, 0 );
     SHARED_WRITE_END( &input->shared->seq );
 }
@@ -1630,7 +1627,7 @@ static user_handle_t find_hardware_message_window( struct desktop *desktop, stru
             if (*msg_code < WM_SYSKEYDOWN) *msg_code += WM_SYSKEYDOWN - WM_KEYDOWN;
         }
     }
-    else if (!input || !(win = input->capture)) /* mouse message */
+    else if (!input || !(win = input->shared->capture)) /* mouse message */
     {
         if (is_window_visible( msg->win ) && !is_window_transparent( msg->win )) win = msg->win;
         else win = shallow_window_from_point( desktop, msg->x, msg->y );
@@ -3199,10 +3196,10 @@ DECL_HANDLER(get_thread_input)
     if (input)
     {
         reply->focus      = input->shared->focus;
-        reply->capture    = input->capture;
+        reply->capture    = input->shared->capture;
         reply->active     = input->shared->active;
-        reply->menu_owner = input->menu_owner;
-        reply->move_size  = input->move_size;
+        reply->menu_owner = input->shared->menu_owner;
+        reply->move_size  = input->shared->move_size;
         reply->caret      = input->caret;
         reply->cursor     = input->cursor;
         reply->show_count = input->cursor_count;
@@ -3366,16 +3363,18 @@ DECL_HANDLER(set_capture_window)
         struct thread_input *input = queue->input;
 
         /* if in menu mode, reject all requests to change focus, except if the menu bit is set */
-        if (input->menu_owner && !(req->flags & CAPTURE_MENU))
+        if (input->shared->menu_owner && !(req->flags & CAPTURE_MENU))
         {
             set_error(STATUS_ACCESS_DENIED);
             return;
         }
-        reply->previous = input->capture;
-        input->capture = get_user_full_handle( req->handle );
-        input->menu_owner = (req->flags & CAPTURE_MENU) ? input->capture : 0;
-        input->move_size = (req->flags & CAPTURE_MOVESIZE) ? input->capture : 0;
-        reply->full_handle = input->capture;
+        reply->previous = input->shared->capture;
+        SHARED_WRITE_BEGIN( &input->shared->seq );
+        input->shared->capture = get_user_full_handle( req->handle );
+        input->shared->menu_owner = (req->flags & CAPTURE_MENU) ? input->shared->capture : 0;
+        input->shared->move_size = (req->flags & CAPTURE_MOVESIZE) ? input->shared->capture : 0;
+        SHARED_WRITE_END( &input->shared->seq );
+        reply->full_handle = input->shared->capture;
     }
 }
 
From 6a3ccada356c67a61087ae08f05fda480821642e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 18:38:28 +0100
Subject: [PATCH] user32: Use input shared memory for GetCapture.

---
 dlls/user32/input.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/dlls/user32/input.c b/dlls/user32/input.c
index 88cec6d74bd..9e0270336b5 100644
--- a/dlls/user32/input.c
+++ b/dlls/user32/input.c
@@ -362,14 +362,14 @@ BOOL WINAPI DECLSPEC_HOTPATCH ReleaseCapture(void)
  */
 HWND WINAPI GetCapture(void)
 {
+    volatile struct input_shared_memory *shared = get_input_shared_memory();
     HWND ret = 0;
 
-    SERVER_START_REQ( get_thread_input )
+    SHARED_READ_BEGIN( &shared->seq )
     {
-        req->tid = GetCurrentThreadId();
-        if (!wine_server_call_err( req )) ret = wine_server_ptr_handle( reply->capture );
+        ret = wine_server_ptr_handle( shared->capture );
     }
-    SERVER_END_REQ;
+    SHARED_READ_END( &shared->seq );
     return ret;
 }
 
From 6876ac42cc2ec26cf64f7100c531b56daeb15cb4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 18:44:03 +0100
Subject: [PATCH] server: Move caret window and rect to input shared memory.

---
 include/wine/server_protocol.h |  4 ++-
 server/protocol.def            |  2 ++
 server/queue.c                 | 48 ++++++++++++++++++----------------
 3 files changed, 31 insertions(+), 23 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 0e3b63afdf3..9c63800121b 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -835,6 +835,8 @@ struct input_shared_memory
     user_handle_t        active;
     user_handle_t        menu_owner;
     user_handle_t        move_size;
+    user_handle_t        caret;
+    rectangle_t          caret_rect;
 };
 
 
diff --git a/server/protocol.def b/server/protocol.def
index 6e19902bdd6..e9be7472910 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -851,6 +851,8 @@ struct input_shared_memory
     user_handle_t        active;           /* handle to the active window */
     user_handle_t        menu_owner;       /* handle to the menu owner */
     user_handle_t        move_size;        /* handle to the moving/resizing window */
+    user_handle_t        caret;            /* handle to the caret window */
+    rectangle_t          caret_rect;       /* caret rectangle */
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index 452d4487418..8be052ae93a 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -103,8 +103,6 @@ struct thread_input
 {
     struct object          obj;           /* object header */
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
-    user_handle_t          caret;         /* caret window */
-    rectangle_t            caret_rect;    /* caret rectangle */
     int                    caret_hide;    /* caret hide count */
     int                    caret_state;   /* caret on/off state */
     user_handle_t          cursor;        /* current cursor */
@@ -284,16 +282,18 @@ static void free_message( struct message *msg );
 /* set the caret window in a given thread input */
 static void set_caret_window( struct thread_input *input, user_handle_t win )
 {
-    if (!win || win != input->caret)
+    SHARED_WRITE_BEGIN( &input->shared->seq );
+    if (!win || win != input->shared->caret)
     {
-        input->caret_rect.left   = 0;
-        input->caret_rect.top    = 0;
-        input->caret_rect.right  = 0;
-        input->caret_rect.bottom = 0;
+        input->shared->caret_rect.left   = 0;
+        input->shared->caret_rect.top    = 0;
+        input->shared->caret_rect.right  = 0;
+        input->shared->caret_rect.bottom = 0;
     }
-    input->caret             = win;
+    input->shared->caret     = win;
     input->caret_hide        = 1;
     input->caret_state       = 0;
+    SHARED_WRITE_END( &input->shared->seq );
 }
 
 /* create a thread input object */
@@ -1203,7 +1203,7 @@ static inline void thread_input_cleanup_window( struct msg_queue *queue, user_ha
     if (window == input->shared->active) input->shared->active = 0;
     if (window == input->shared->menu_owner) input->shared->menu_owner = 0;
     if (window == input->shared->move_size) input->shared->move_size = 0;
-    if (window == input->caret) set_caret_window( input, 0 );
+    if (window == input->shared->caret) set_caret_window( input, 0 );
     SHARED_WRITE_END( &input->shared->seq );
 }
 
@@ -3200,10 +3200,10 @@ DECL_HANDLER(get_thread_input)
         reply->active     = input->shared->active;
         reply->menu_owner = input->shared->menu_owner;
         reply->move_size  = input->shared->move_size;
-        reply->caret      = input->caret;
+        reply->caret      = input->shared->caret;
         reply->cursor     = input->cursor;
         reply->show_count = input->cursor_count;
-        reply->rect       = input->caret_rect;
+        reply->rect       = input->shared->caret_rect;
     }
 
     /* foreground window is active window of foreground thread */
@@ -3389,14 +3389,16 @@ DECL_HANDLER(set_caret_window)
     {
         struct thread_input *input = queue->input;
 
-        reply->previous  = input->caret;
-        reply->old_rect  = input->caret_rect;
+        reply->previous  = input->shared->caret;
+        reply->old_rect  = input->shared->caret_rect;
         reply->old_hide  = input->caret_hide;
         reply->old_state = input->caret_state;
 
+        SHARED_WRITE_BEGIN( &input->shared->seq );
         set_caret_window( input, get_user_full_handle(req->handle) );
-        input->caret_rect.right  = input->caret_rect.left + req->width;
-        input->caret_rect.bottom = input->caret_rect.top + req->height;
+        input->shared->caret_rect.right  = input->shared->caret_rect.left + req->width;
+        input->shared->caret_rect.bottom = input->shared->caret_rect.top + req->height;
+        SHARED_WRITE_END( &input->shared->seq );
     }
 }
 
@@ -3409,22 +3411,24 @@ DECL_HANDLER(set_caret_info)
 
     if (!queue) return;
     input = queue->input;
-    reply->full_handle = input->caret;
-    reply->old_rect    = input->caret_rect;
+    reply->full_handle = input->shared->caret;
+    reply->old_rect    = input->shared->caret_rect;
     reply->old_hide    = input->caret_hide;
     reply->old_state   = input->caret_state;
 
-    if (req->handle && get_user_full_handle(req->handle) != input->caret)
+    if (req->handle && get_user_full_handle(req->handle) != input->shared->caret)
     {
         set_error( STATUS_ACCESS_DENIED );
         return;
     }
     if (req->flags & SET_CARET_POS)
     {
-        input->caret_rect.right  += req->x - input->caret_rect.left;
-        input->caret_rect.bottom += req->y - input->caret_rect.top;
-        input->caret_rect.left = req->x;
-        input->caret_rect.top  = req->y;
+        SHARED_WRITE_BEGIN( &input->shared->seq );
+        input->shared->caret_rect.right  += req->x - input->shared->caret_rect.left;
+        input->shared->caret_rect.bottom += req->y - input->shared->caret_rect.top;
+        input->shared->caret_rect.left = req->x;
+        input->shared->caret_rect.top  = req->y;
+        SHARED_WRITE_END( &input->shared->seq );
     }
     if (req->flags & SET_CARET_HIDE)
     {
From 7959044682eb8343fbddc7c862ee8912cab147a2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 19:05:34 +0100
Subject: [PATCH] user32: Use input shared memory for GetGUIThreadInfo.

When the current thread is requested.
---
 dlls/user32/message.c | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index c85d3ad3c47..7c4ffea567e 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -4547,6 +4547,7 @@ BOOL WINAPI IsGUIThread( BOOL convert )
  */
 BOOL WINAPI GetGUIThreadInfo( DWORD id, GUITHREADINFO *info )
 {
+    volatile struct input_shared_memory *shared;
     BOOL ret;
 
     if (info->cbSize != sizeof(*info))
@@ -4555,6 +4556,33 @@ BOOL WINAPI GetGUIThreadInfo( DWORD id, GUITHREADINFO *info )
         return FALSE;
     }
 
+    if (id == GetCurrentThreadId()) shared = get_input_shared_memory();
+    else if (id == 0) shared = get_foreground_shared_memory();
+    else shared = NULL;
+
+    if (shared)
+    {
+        SHARED_READ_BEGIN( &shared->seq )
+        {
+            info->flags          = 0;
+            info->hwndActive     = wine_server_ptr_handle( shared->active );
+            info->hwndFocus      = wine_server_ptr_handle( shared->focus );
+            info->hwndCapture    = wine_server_ptr_handle( shared->capture );
+            info->hwndMenuOwner  = wine_server_ptr_handle( shared->menu_owner );
+            info->hwndMoveSize   = wine_server_ptr_handle( shared->move_size );
+            info->hwndCaret      = wine_server_ptr_handle( shared->caret );
+            info->rcCaret.left   = shared->caret_rect.left;
+            info->rcCaret.top    = shared->caret_rect.top;
+            info->rcCaret.right  = shared->caret_rect.right;
+            info->rcCaret.bottom = shared->caret_rect.bottom;
+            if (shared->menu_owner) info->flags |= GUI_INMENUMODE;
+            if (shared->move_size) info->flags |= GUI_INMOVESIZE;
+            if (shared->caret) info->flags |= GUI_CARETBLINKING;
+        }
+        SHARED_READ_END( &shared->seq );
+        return TRUE;
+    }
+
     SERVER_START_REQ( get_thread_input )
     {
         req->tid = id;
From 1670cc389f10569a611b28100cea39fc8ad09beb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 22:11:03 +0100
Subject: [PATCH] server: Add cursor handle and count to desktop shared memory.

---
 include/wine/server_protocol.h |  4 +++-
 server/protocol.def            |  2 ++
 server/queue.c                 | 44 ++++++++++++++++++++--------------
 3 files changed, 31 insertions(+), 19 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 9c63800121b..9e898968dc6 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -836,7 +836,9 @@ struct input_shared_memory
     user_handle_t        menu_owner;
     user_handle_t        move_size;
     user_handle_t        caret;
+    user_handle_t        cursor;
     rectangle_t          caret_rect;
+    int                  cursor_count;
 };
 
 
diff --git a/server/protocol.def b/server/protocol.def
index e9be7472910..fbfdf25b2de 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -852,7 +852,9 @@ struct input_shared_memory
     user_handle_t        menu_owner;       /* handle to the menu owner */
     user_handle_t        move_size;        /* handle to the moving/resizing window */
     user_handle_t        caret;            /* handle to the caret window */
+    user_handle_t        cursor;           /* handle to the cursor */
     rectangle_t          caret_rect;       /* caret rectangle */
+    int                  cursor_count;     /* cursor show count */
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index 8be052ae93a..e47db3b0407 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -105,8 +105,6 @@ struct thread_input
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
     int                    caret_hide;    /* caret hide count */
     int                    caret_state;   /* caret on/off state */
-    user_handle_t          cursor;        /* current cursor */
-    int                    cursor_count;  /* cursor show count */
     struct list            msg_list;      /* list of hardware messages */
     unsigned char          keystate[256]; /* state of each key */
     struct object         *shared_mapping; /* thread input shared memory mapping */
@@ -311,8 +309,8 @@ static struct thread_input *create_thread_input( struct thread *thread )
         input->shared->active       = 0;
         input->shared->menu_owner   = 0;
         input->shared->move_size    = 0;
-        input->cursor       = 0;
-        input->cursor_count = 0;
+        input->shared->cursor       = 0;
+        input->shared->cursor_count = 0;
         SHARED_WRITE_END( &input->shared->seq );
         list_init( &input->msg_list );
         set_caret_window( input, 0 );
@@ -416,12 +416,16 @@ static int assign_thread_input( struct thread *thread, struct thread_input *new_
     if (queue->input)
     {
         if (queue->keystate_locked) queue->input->lock_count--;
-        queue->input->cursor_count -= queue->cursor_count;
+        SHARED_WRITE_BEGIN( &queue->input->shared->seq );
+        queue->input->shared->cursor_count -= queue->cursor_count;
+        SHARED_WRITE_END( &queue->input->shared->seq );
         release_object( queue->input );
         queue->keystate_locked = 0;
     }
     queue->input = (struct thread_input *)grab_object( new_input );
-    new_input->cursor_count += queue->cursor_count;
+    SHARED_WRITE_BEGIN( &new_input->shared->seq );
+    new_input->shared->cursor_count += queue->cursor_count;
+    SHARED_WRITE_END( &new_input->shared->seq );
 
     SHARED_WRITE_BEGIN( &queue->shared->seq );
     queue->shared->input_tid = queue->input->shared->tid;
@@ -1176,7 +1180,9 @@ static void msg_queue_destroy( struct object *obj )
     }
     if (queue->timeout) remove_timeout_user( queue->timeout );
     if (queue->keystate_locked) queue->input->lock_count--;
-    queue->input->cursor_count -= queue->cursor_count;
+    SHARED_WRITE_BEGIN( &queue->input->shared->seq );
+    queue->input->shared->cursor_count -= queue->cursor_count;
+    SHARED_WRITE_END( &queue->input->shared->seq );
     release_object( queue->input );
     if (queue->hooks) release_object( queue->hooks );
     if (queue->fd) release_object( queue->fd );
@@ -3201,8 +3205,8 @@ DECL_HANDLER(get_thread_input)
         reply->menu_owner = input->shared->menu_owner;
         reply->move_size  = input->shared->move_size;
         reply->caret      = input->shared->caret;
-        reply->cursor     = input->cursor;
-        reply->show_count = input->cursor_count;
+        reply->cursor     = input->shared->cursor;
+        reply->show_count = input->shared->cursor_count;
         reply->rect       = input->shared->caret_rect;
     }
 
@@ -3465,25 +3469,29 @@ DECL_HANDLER(set_cursor)
     if (!queue) return;
     input = queue->input;
 
-    reply->prev_handle = input->cursor;
-    reply->prev_count  = input->cursor_count;
+    reply->prev_handle = input->shared->cursor;
+    reply->prev_count  = input->shared->cursor_count;
     reply->prev_x      = input->desktop->shared->cursor.x;
     reply->prev_y      = input->desktop->shared->cursor.y;
 
+    if ((req->flags & SET_CURSOR_HANDLE) && req->handle &&
+        !get_user_object( req->handle, USER_CLIENT ))
+    {
+        set_win32_error( ERROR_INVALID_CURSOR_HANDLE );
+        return;
+    }
+
+    SHARED_WRITE_BEGIN( &input->shared->seq );
     if (req->flags & SET_CURSOR_HANDLE)
     {
-        if (req->handle && !get_user_object( req->handle, USER_CLIENT ))
-        {
-            set_win32_error( ERROR_INVALID_CURSOR_HANDLE );
-            return;
-        }
-        input->cursor = req->handle;
+        input->shared->cursor = req->handle;
     }
     if (req->flags & SET_CURSOR_COUNT)
     {
         queue->cursor_count += req->show_count;
-        input->cursor_count += req->show_count;
+        input->shared->cursor_count += req->show_count;
     }
+    SHARED_WRITE_END( &input->shared->seq );
     if (req->flags & SET_CURSOR_POS)
     {
         set_cursor_pos( input->desktop, req->x, req->y );
From 205ceacb09adc071fbd31c9be7f05f4ffc236c96 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 19:19:51 +0100
Subject: [PATCH] user32: Use input shared memory for GetCursorInfo.

---
 dlls/user32/input.c | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)

diff --git a/dlls/user32/input.c b/dlls/user32/input.c
index 9e0270336b5..33fb332382b 100644
--- a/dlls/user32/input.c
+++ b/dlls/user32/input.c
@@ -281,20 +281,19 @@ BOOL WINAPI DECLSPEC_HOTPATCH GetCursorPos( POINT *pt )
  */
 BOOL WINAPI GetCursorInfo( PCURSORINFO pci )
 {
+    volatile struct input_shared_memory *shared = get_foreground_shared_memory();
     BOOL ret;
 
     if (!pci) return FALSE;
 
-    SERVER_START_REQ( get_thread_input )
+    if (!shared) ret = FALSE;
+    else SHARED_READ_BEGIN( &shared->seq )
     {
-        req->tid = 0;
-        if ((ret = !wine_server_call( req )))
-        {
-            pci->hCursor = wine_server_ptr_handle( reply->cursor );
-            pci->flags = (reply->show_count >= 0) ? CURSOR_SHOWING : 0;
-        }
+        pci->hCursor = wine_server_ptr_handle( shared->cursor );
+        pci->flags = (shared->cursor_count >= 0) ? CURSOR_SHOWING : 0;
+        ret = TRUE;
     }
-    SERVER_END_REQ;
+    SHARED_READ_END( &shared->seq );
     GetCursorPos(&pci->ptScreenPos);
     return ret;
 }
From 6696e1faff6ddc4c2dd302f0be625b00b7188493 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 19:21:09 +0100
Subject: [PATCH] server: Remove cursor and show_count from get_thread_input.

---
 include/wine/server_protocol.h | 6 ++----
 server/protocol.def            | 2 --
 server/queue.c                 | 2 --
 server/request.h               | 6 ++----
 server/trace.c                 | 2 --
 5 files changed, 4 insertions(+), 14 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 9e898968dc6..f559adee841 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -4129,10 +4129,8 @@ struct get_thread_input_reply
     user_handle_t  menu_owner;
     user_handle_t  move_size;
     user_handle_t  caret;
-    user_handle_t  cursor;
-    int            show_count;
     rectangle_t    rect;
-    char __pad_60[4];
+    char __pad_52[4];
 };
 
 
diff --git a/server/protocol.def b/server/protocol.def
index fbfdf25b2de..7edca5253b0 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -2946,8 +2946,6 @@ enum coords_relative
     user_handle_t  menu_owner;    /* handle to the menu owner */
     user_handle_t  move_size;     /* handle to the moving/resizing window */
     user_handle_t  caret;         /* handle to the caret window */
-    user_handle_t  cursor;        /* handle to the cursor */
-    int            show_count;    /* cursor show count */
     rectangle_t    rect;          /* caret rectangle */
 @END
 
diff --git a/server/queue.c b/server/queue.c
index e47db3b0407..48a8b7639ab 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -3205,8 +3205,6 @@ DECL_HANDLER(get_thread_input)
         reply->menu_owner = input->shared->menu_owner;
         reply->move_size  = input->shared->move_size;
         reply->caret      = input->shared->caret;
-        reply->cursor     = input->shared->cursor;
-        reply->show_count = input->shared->cursor_count;
         reply->rect       = input->shared->caret_rect;
     }
 
diff --git a/server/request.h b/server/request.h
index 38741ca778e..425a9d93d1b 100644
--- a/server/request.h
+++ b/server/request.h
@@ -1865,10 +1865,8 @@ C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, foreground) == 20 );
 C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, menu_owner) == 24 );
 C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, move_size) == 28 );
 C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, caret) == 32 );
-C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, cursor) == 36 );
-C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, show_count) == 40 );
-C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, rect) == 44 );
-C_ASSERT( sizeof(struct get_thread_input_reply) == 64 );
+C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, rect) == 36 );
+C_ASSERT( sizeof(struct get_thread_input_reply) == 56 );
 C_ASSERT( sizeof(struct get_last_input_time_request) == 16 );
 C_ASSERT( FIELD_OFFSET(struct get_last_input_time_reply, time) == 8 );
 C_ASSERT( sizeof(struct get_last_input_time_reply) == 16 );
diff --git a/server/trace.c b/server/trace.c
index 6e2840f62e5..945ced51bdb 100644
--- a/server/trace.c
+++ b/server/trace.c
@@ -3511,8 +3511,6 @@ static void dump_get_thread_input_reply( const struct get_thread_input_reply *re
     fprintf( stderr, ", menu_owner=%08x", req->menu_owner );
     fprintf( stderr, ", move_size=%08x", req->move_size );
     fprintf( stderr, ", caret=%08x", req->caret );
-    fprintf( stderr, ", cursor=%08x", req->cursor );
-    fprintf( stderr, ", show_count=%d", req->show_count );
     dump_rectangle( ", rect=", &req->rect );
 }
 
From e7fdbc36862c36f673d48f0ad0ac0e01945b782f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 22:12:08 +0100
Subject: [PATCH] server: Remove foreground window from get_thread_input.

---
 include/wine/server_protocol.h |  4 +---
 server/protocol.def            |  1 -
 server/queue.c                 |  2 --
 server/request.h               | 11 +++++------
 server/trace.c                 |  1 -
 5 files changed, 6 insertions(+), 13 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index f559adee841..ab2eea936db 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -4125,12 +4125,10 @@ struct get_thread_input_reply
     user_handle_t  focus;
     user_handle_t  capture;
     user_handle_t  active;
-    user_handle_t  foreground;
     user_handle_t  menu_owner;
     user_handle_t  move_size;
     user_handle_t  caret;
     rectangle_t    rect;
-    char __pad_52[4];
 };
 
 
@@ -6782,7 +6780,7 @@ union generic_reply
 
 /* ### protocol_version begin ### */
 
-#define SERVER_PROTOCOL_VERSION 663
+#define SERVER_PROTOCOL_VERSION 673
 
 /* ### protocol_version end ### */
 
diff --git a/server/protocol.def b/server/protocol.def
index 7edca5253b0..ead8cdf4497 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -2942,7 +2942,6 @@ enum coords_relative
     user_handle_t  focus;         /* handle to the focus window */
     user_handle_t  capture;       /* handle to the capture window */
     user_handle_t  active;        /* handle to the active window */
-    user_handle_t  foreground;    /* handle to the global foreground window */
     user_handle_t  menu_owner;    /* handle to the menu owner */
     user_handle_t  move_size;     /* handle to the moving/resizing window */
     user_handle_t  caret;         /* handle to the caret window */
diff --git a/server/queue.c b/server/queue.c
index 48a8b7639ab..31ba49943f5 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -3208,8 +3208,6 @@ DECL_HANDLER(get_thread_input)
         reply->rect       = input->shared->caret_rect;
     }
 
-    /* foreground window is active window of foreground thread */
-    reply->foreground = desktop->foreground_input ? desktop->foreground_input->shared->active : 0;
     if (thread) release_object( thread );
     release_object( desktop );
 }
diff --git a/server/request.h b/server/request.h
index 425a9d93d1b..1f3090598c6 100644
--- a/server/request.h
+++ b/server/request.h
@@ -1861,12 +1861,11 @@ C_ASSERT( sizeof(struct get_thread_input_request) == 16 );
 C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, focus) == 8 );
 C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, capture) == 12 );
 C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, active) == 16 );
-C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, foreground) == 20 );
-C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, menu_owner) == 24 );
-C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, move_size) == 28 );
-C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, caret) == 32 );
-C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, rect) == 36 );
-C_ASSERT( sizeof(struct get_thread_input_reply) == 56 );
+C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, menu_owner) == 20 );
+C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, move_size) == 24 );
+C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, caret) == 28 );
+C_ASSERT( FIELD_OFFSET(struct get_thread_input_reply, rect) == 32 );
+C_ASSERT( sizeof(struct get_thread_input_reply) == 48 );
 C_ASSERT( sizeof(struct get_last_input_time_request) == 16 );
 C_ASSERT( FIELD_OFFSET(struct get_last_input_time_reply, time) == 8 );
 C_ASSERT( sizeof(struct get_last_input_time_reply) == 16 );
diff --git a/server/trace.c b/server/trace.c
index 945ced51bdb..428c08fb8c0 100644
--- a/server/trace.c
+++ b/server/trace.c
@@ -3507,7 +3507,6 @@ static void dump_get_thread_input_reply( const struct get_thread_input_reply *re
     fprintf( stderr, " focus=%08x", req->focus );
     fprintf( stderr, ", capture=%08x", req->capture );
     fprintf( stderr, ", active=%08x", req->active );
-    fprintf( stderr, ", foreground=%08x", req->foreground );
     fprintf( stderr, ", menu_owner=%08x", req->menu_owner );
     fprintf( stderr, ", move_size=%08x", req->move_size );
     fprintf( stderr, ", caret=%08x", req->caret );
