From: Joshua Ashton <joshua@froggi.es>
Subject: [PATCH 1/3] winevulkan: Migrate vkGetPhysicalDeviceSurfaceFormats2KHR to a private thunk
Message-Id: <ac31a620-28d8-b14a-e839-59986327990b@froggi.es>
Date: Tue, 13 Oct 2020 02:49:16 +0100


- Joshie üê∏‚ú®

From 13101988ff1f592db704daa121dadaf3c615d214 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Mon, 12 Oct 2020 23:31:21 +0100
Subject: [PATCH 1/3] winevulkan: Migrate vkGetPhysicalDeviceSurfaceFormats2KHR
 to a private thunk

Needed for VK_EXT_full_screen_exclusive

Signed-off-by: Joshua Ashton <joshua@froggi.es>
---
 dlls/winevulkan/make_vulkan |  2 +-
 dlls/winevulkan/vulkan.c    | 13 +++++++++++++
 2 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index 7f89cfdaba..db1d8edcf3 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -189,7 +189,7 @@ FUNCTION_OVERRIDES = {
 
     # VK_KHR_get_surface_capabilities2
     "vkGetPhysicalDeviceSurfaceCapabilities2KHR" : {"dispatch" : True, "driver" : True, "thunk" : False, "private_thunk" : True},
-    "vkGetPhysicalDeviceSurfaceFormats2KHR" : {"dispatch" : True, "driver" : True, "thunk" : True},
+    "vkGetPhysicalDeviceSurfaceFormats2KHR" : {"dispatch" : True, "driver" : True, "thunk" : False, "private_thunk" : True},
 
     # VK_KHR_win32_surface
     "vkCreateWin32SurfaceKHR" : {"dispatch" : True, "driver" : True, "thunk" : True},
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index f730c04923..4352c5536e 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -1616,6 +1616,19 @@ VkResult WINAPI wine_vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice
     return res;
 }
 
+VkResult WINAPI wine_vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice phys_dev,
+        const VkPhysicalDeviceSurfaceInfo2KHR *surface_info, uint32_t *surface_format_count,
+        VkSurfaceFormat2KHR *surface_formats)
+{
+    VkResult res;
+
+    TRACE("%p, %p, %p, %p\n", phys_dev, surface_info, surface_format_count, surface_formats);
+
+    res = thunk_vkGetPhysicalDeviceSurfaceFormats2KHR(phys_dev, surface_info, surface_format_count, surface_formats);
+
+    return res;
+}
+
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, void *reserved)
 {
     TRACE("%p, %u, %p\n", hinst, reason, reserved);

-- 
2.28.0
From: Joshua Ashton <joshua@froggi.es>
Subject: [PATCH 2/3] winevulkan: Implement extension faking mechanism
Message-Id: <9ed806ff-ffdb-4a50-471e-577a6cbaeb1a@froggi.es>
Date: Tue, 13 Oct 2020 02:50:04 +0100


- Joshie üê∏‚ú®

From 5ad98251330ca0e6b2f28e825dc3ea0c1f7b60ab Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Mon, 12 Oct 2020 23:39:58 +0100
Subject: [PATCH 2/3] winevulkan: Implement extension faking mechanism

Needed for VK_EXT_full_screen_exclusive

Signed-off-by: Joshua Ashton <joshua@froggi.es>
---
 dlls/winevulkan/make_vulkan      | 21 +++++++++++++++++++
 dlls/winevulkan/vulkan.c         | 36 ++++++++++++++++++++++++++++++++
 dlls/winevulkan/vulkan_private.h |  3 +++
 3 files changed, 60 insertions(+)

diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index db1d8edcf3..70d8fa5516 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -232,6 +232,10 @@ STRUCT_CHAIN_CONVERSIONS = [
     "VkInstanceCreateInfo",
 ]
 
+# List of device extensions to ensure that we support regardless of whether 
+# the actual driver supports them or not.
+FAKED_EXTENSIONS = [
+]
 
 class Direction(Enum):
     """ Parameter direction: input, output, input_output. """
@@ -2247,6 +2251,13 @@ class VkGenerator(object):
             f.write("    \"{0}\",\n".format(ext["name"]))
         f.write("};\n\n")
 
+        # Create array of faked device extensions.
+        f.write("static const VkExtensionProperties vk_device_extension_faked[] =\n{\n")
+        for ext in FAKED_EXTENSIONS:
+            f.write("    {{\"{0}\", {1}}},\n".format(ext["name"], ext["version"]))
+        f.write("    {\"\", 0}\n")
+        f.write("};\n\n")
+
         # Create array of instance extensions.
         f.write("static const char * const vk_instance_extensions[] =\n{\n")
         for ext in self.registry.extensions:
@@ -2276,6 +2287,16 @@ class VkGenerator(object):
         f.write("            return TRUE;\n")
         f.write("    }\n")
         f.write("    return FALSE;\n")
+        f.write("}\n\n")
+
+        f.write("unsigned int wine_vk_device_extension_faked_count(void)\n")
+        f.write("{\n")
+        f.write("    return ARRAY_SIZE(vk_device_extension_faked) - 1;\n")
+        f.write("}\n\n")
+
+        f.write("const VkExtensionProperties* wine_vk_device_extension_faked_idx(unsigned int idx)\n")
+        f.write("{\n")
+        f.write("    return &vk_device_extension_faked[idx];\n")
         f.write("}\n")
 
     def generate_thunks_h(self, f, prefix):
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 4352c5536e..177aa3a8bf 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -129,6 +129,8 @@ static struct VkPhysicalDevice_T *wine_vk_physical_device_alloc(struct VkInstanc
             TRACE("Skipping extension '%s', no implementation found in winevulkan.\n", host_properties[i].extensionName);
         }
     }
+    
+    num_properties += wine_vk_device_extension_faked_count();
 
     TRACE("Host supported extensions %u, Wine supported extensions %u\n", num_host_properties, num_properties);
 
@@ -146,6 +148,11 @@ static struct VkPhysicalDevice_T *wine_vk_physical_device_alloc(struct VkInstanc
             j++;
         }
     }
+    for (i = 0; i < wine_vk_device_extension_faked_count(); i++)
+    {
+        object->extensions[j] = *wine_vk_device_extension_faked_idx(i);
+        j++;
+    }
     object->extension_count = num_properties;
 
     heap_free(host_properties);
@@ -226,13 +233,27 @@ static void wine_vk_device_free_create_info(VkDeviceCreateInfo *create_info)
         heap_free((void *)group_info->pPhysicalDevices);
     }
 
+    heap_free((void *)create_info->ppEnabledExtensionNames);
+
     free_VkDeviceCreateInfo_struct_chain(create_info);
 }
 
+static BOOL wine_vk_device_extension_faked(const char *name)
+{
+    unsigned int i;
+    for (i = 0; i < wine_vk_device_extension_faked_count(); i++)
+    {
+        if (strcmp(wine_vk_device_extension_faked_idx(i)->extensionName, name) == 0)
+            return TRUE;
+    }
+    return FALSE;
+}
+
 static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src,
         VkDeviceCreateInfo *dst)
 {
     VkDeviceGroupDeviceCreateInfo *group_info;
+    const char** extensions;
     unsigned int i;
     VkResult res;
 
@@ -261,6 +282,21 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
         group_info->pPhysicalDevices = physical_devices;
     }
 
+
+    /* Allocate our own extension list, and remove any faked extensions
+     * so they don't get passed through to the driver. */
+    extensions = heap_alloc(sizeof(const char*) * src->enabledExtensionCount);
+    dst->ppEnabledExtensionNames = extensions;
+    dst->enabledExtensionCount = 0;
+    for (i = 0; i < src->enabledExtensionCount; i++) {
+        const char *extension_name = src->ppEnabledExtensionNames[i];
+
+        if (!wine_vk_device_extension_faked(extension_name)) {
+            extensions[dst->enabledExtensionCount] = extension_name;
+            dst->enabledExtensionCount++;
+        }
+    }
+
     /* Should be filtered out by loader as ICDs don't support layers. */
     dst->enabledLayerCount = 0;
     dst->ppEnabledLayerNames = NULL;
diff --git a/dlls/winevulkan/vulkan_private.h b/dlls/winevulkan/vulkan_private.h
index 4bcc4de440..bb4a3e7ded 100644
--- a/dlls/winevulkan/vulkan_private.h
+++ b/dlls/winevulkan/vulkan_private.h
@@ -135,6 +135,9 @@ static inline VkCommandPool wine_cmd_pool_to_handle(struct wine_cmd_pool *cmd_po
 void *wine_vk_get_device_proc_addr(const char *name) DECLSPEC_HIDDEN;
 void *wine_vk_get_instance_proc_addr(const char *name) DECLSPEC_HIDDEN;
 
+unsigned int wine_vk_device_extension_faked_count(void) DECLSPEC_HIDDEN;
+const VkExtensionProperties* wine_vk_device_extension_faked_idx(unsigned int idx) DECLSPEC_HIDDEN;
+
 BOOL wine_vk_device_extension_supported(const char *name) DECLSPEC_HIDDEN;
 BOOL wine_vk_instance_extension_supported(const char *name) DECLSPEC_HIDDEN;
 

-- 
2.28.0
From: Joshua Ashton <joshua@froggi.es>
Subject: [PATCH 3/3] winevulkan: Fake support for VK_EXT_full_screen_exclusive
Message-Id: <86a6c309-a827-5b19-603f-d269acdf22fd@froggi.es>
Date: Tue, 13 Oct 2020 02:51:04 +0100


- Joshie üê∏‚ú®

From 12665c7f3bfbd2b12b851950822aff1c337e212b Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Mon, 12 Oct 2020 23:53:59 +0100
Subject: [PATCH 3/3] winevulkan: Fake support for VK_EXT_full_screen_exclusive

Signed-off-by: Joshua Ashton <joshua@froggi.es>
---
 dlls/winevulkan/make_vulkan |  8 ++++-
 dlls/winevulkan/vulkan.c    | 59 +++++++++++++++++++++++++++++++++++--
 2 files changed, 64 insertions(+), 3 deletions(-)

diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index 70d8fa5516..fa2f9edf73 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -101,7 +101,6 @@ UNSUPPORTED_EXTENSIONS = [
     # Device extensions
     "VK_AMD_display_native_hdr",
     "VK_EXT_display_control", # Requires VK_EXT_display_surface_counter
-    "VK_EXT_full_screen_exclusive",
     "VK_EXT_hdr_metadata", # Needs WSI work.
     "VK_EXT_pipeline_creation_feedback",
     "VK_GOOGLE_display_timing",
@@ -225,6 +224,12 @@ FUNCTION_OVERRIDES = {
     # VK_EXT_calibrated_timestamps
     "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" : {"dispatch" : True, "driver" : False, "thunk" : False},
     "vkGetCalibratedTimestampsEXT" : {"dispatch" : True, "driver" : False, "thunk" : False},
+
+    # VK_EXT_full_screen_exclusive
+    "vkGetPhysicalDeviceSurfacePresentModes2EXT" : {"dispatch" : True, "driver" : False, "thunk" : False},
+    "vkGetDeviceGroupSurfacePresentModes2EXT" : {"dispatch" : True, "driver" : False, "thunk" : False},
+    "vkAcquireFullScreenExclusiveModeEXT" : {"dispatch" : True, "driver" : False, "thunk" : False},
+    "vkReleaseFullScreenExclusiveModeEXT" : {"dispatch" : True, "driver" : False, "thunk" : False},
 }
 
 STRUCT_CHAIN_CONVERSIONS = [
@@ -235,6 +240,7 @@ STRUCT_CHAIN_CONVERSIONS = [
 # List of device extensions to ensure that we support regardless of whether 
 # the actual driver supports them or not.
 FAKED_EXTENSIONS = [
+    {"name": "VK_EXT_full_screen_exclusive", "version": 4} 
 ]
 
 class Direction(Enum):
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 177aa3a8bf..fa18209cbd 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -1640,15 +1640,30 @@ VkResult WINAPI wine_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice
 VkResult WINAPI wine_vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice phys_dev,
         const VkPhysicalDeviceSurfaceInfo2KHR *surface_info, VkSurfaceCapabilities2KHR *capabilities)
 {
+    VkPhysicalDeviceSurfaceInfo2KHR surface_info_modified;
     VkResult res;
 
     TRACE("%p, %p, %p\n", phys_dev, surface_info, capabilities);
 
-    res = thunk_vkGetPhysicalDeviceSurfaceCapabilities2KHR(phys_dev, surface_info, capabilities);
+    /* Toss out VkSurfaceFullScreenExclusiveInfoEXT
+     * and VkSurfaceFullScreenExclusiveWin32InfoEXT */
+    surface_info_modified.sType   = surface_info->sType;
+    surface_info_modified.pNext   = NULL;
+    surface_info_modified.surface = surface_info->surface;
+
+    res = thunk_vkGetPhysicalDeviceSurfaceCapabilities2KHR(phys_dev, &surface_info_modified, capabilities);
 
     if (res == VK_SUCCESS)
+    {
+        VkSurfaceCapabilitiesFullScreenExclusiveEXT *full_screen_exclusive_caps; 
+
         adjust_max_image_count(phys_dev, &capabilities->surfaceCapabilities);
 
+        /* Lie and say we support exclusive fullscreen. */
+        if ((full_screen_exclusive_caps = wine_vk_find_struct(capabilities, SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT)))
+            full_screen_exclusive_caps->fullScreenExclusiveSupported = VK_TRUE;
+    }
+
     return res;
 }
 
@@ -1656,15 +1671,55 @@ VkResult WINAPI wine_vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice phys
         const VkPhysicalDeviceSurfaceInfo2KHR *surface_info, uint32_t *surface_format_count,
         VkSurfaceFormat2KHR *surface_formats)
 {
+    VkPhysicalDeviceSurfaceInfo2KHR surface_info_modified;
     VkResult res;
 
     TRACE("%p, %p, %p, %p\n", phys_dev, surface_info, surface_format_count, surface_formats);
 
-    res = thunk_vkGetPhysicalDeviceSurfaceFormats2KHR(phys_dev, surface_info, surface_format_count, surface_formats);
+    /* Toss out VkSurfaceFullScreenExclusiveInfoEXT
+     * and VkSurfaceFullScreenExclusiveWin32InfoEXT */
+    surface_info_modified.sType   = surface_info->sType;
+    surface_info_modified.pNext   = NULL;
+    surface_info_modified.surface = surface_info->surface;
+
+    res = thunk_vkGetPhysicalDeviceSurfaceFormats2KHR(phys_dev, &surface_info_modified, surface_format_count, surface_formats);
 
     return res;
 }
 
+VkResult WINAPI wine_vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pPresentModeCount, VkPresentModeKHR *pPresentModes);
+VkResult WINAPI wine_vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR *pModes);
+
+VkResult WINAPI wine_vkGetPhysicalDeviceSurfacePresentModes2EXT(
+    VkPhysicalDevice phys_dev, const VkPhysicalDeviceSurfaceInfo2KHR *surface_info,
+    uint32_t *present_mode_count, VkPresentModeKHR *present_modes)
+{
+    TRACE("%p, %p, %p, %p", phys_dev, surface_info, present_mode_count, present_modes);
+    return wine_vkGetPhysicalDeviceSurfacePresentModesKHR(phys_dev, surface_info->surface, present_mode_count, present_modes);
+}
+
+VkResult WINAPI wine_vkGetDeviceGroupSurfacePresentModes2EXT(
+    VkDevice device, const VkPhysicalDeviceSurfaceInfo2KHR *surface_info,
+    VkDeviceGroupPresentModeFlagsKHR *modes)
+{
+    TRACE("%p, %p, %p", device, surface_info, modes);
+    return wine_vkGetDeviceGroupSurfacePresentModesKHR(device, surface_info->surface, modes);
+}
+
+VkResult WINAPI wine_vkAcquireFullScreenExclusiveModeEXT(
+    VkDevice device, VkSwapchainKHR swapchain)
+{
+    TRACE("%p, %s", device, wine_dbgstr_longlong(swapchain));
+    return VK_SUCCESS;
+}
+
+VkResult WINAPI wine_vkReleaseFullScreenExclusiveModeEXT(
+    VkDevice device, VkSwapchainKHR swapchain)
+{
+    TRACE("%p, %s", device, wine_dbgstr_longlong(swapchain));
+    return VK_SUCCESS;
+}
+
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, void *reserved)
 {
     TRACE("%p, %u, %p\n", hinst, reason, reserved);

-- 
2.28.0
