From 427e98268822ff3ff841e6d4e50d9b1e30f7389d Mon Sep 17 00:00:00 2001
From: Hans-Kristian Arntzen <post@arntzen-software.no>
Date: Fri, 2 Jul 2021 16:25:21 +0200
Subject: [PATCH 1/5] vkd3d: Clear single depth-stencil aspect correctly.

When clearing a DSV, we must get aliasing guarantees, so we must
transition away from UNDEFINED. This is only possible when using
separate_ds_layouts and for render pass clears we need to use
renderpass2 mechanisms to do this.

Signed-off-by: Hans-Kristian Arntzen <post@arntzen-software.no>
---
 libs/vkd3d/command.c | 66 +++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 62 insertions(+), 4 deletions(-)

diff --git a/libs/vkd3d/command.c b/libs/vkd3d/command.c
index 6c96cfc2..1fdda5a0 100644
--- a/libs/vkd3d/command.c
+++ b/libs/vkd3d/command.c
@@ -2079,11 +2079,27 @@ static void d3d12_command_list_clear_attachment_inline(struct d3d12_command_list
     }
 }
 
+static VkImageLayout vk_separate_depth_layout(VkImageLayout combined_layout)
+{
+    return (combined_layout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL ||
+            combined_layout == VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL) ?
+            VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL : VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
+}
+
+static VkImageLayout vk_separate_stencil_layout(VkImageLayout combined_layout)
+{
+    return (combined_layout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL ||
+            combined_layout == VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL) ?
+            VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL : VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
+}
+
 static void d3d12_command_list_clear_attachment_pass(struct d3d12_command_list *list, struct d3d12_resource *resource,
         struct vkd3d_view *view, VkImageAspectFlags clear_aspects, const VkClearValue *clear_value, UINT rect_count,
         const D3D12_RECT *rects, bool is_bound)
 {
     const struct vkd3d_vk_device_procs *vk_procs = &list->device->vk_procs;
+    VkAttachmentDescriptionStencilLayout stencil_attachment_desc;
+    VkAttachmentReferenceStencilLayout stencil_attachment_ref;
     VkAttachmentDescription2KHR attachment_desc;
     VkAttachmentReference2KHR attachment_ref;
     VkSubpassBeginInfoKHR subpass_begin_info;
@@ -2095,6 +2111,7 @@ static void d3d12_command_list_clear_attachment_pass(struct d3d12_command_list *
     VkFramebuffer vk_framebuffer;
     VkRenderPass vk_render_pass;
     VkPipelineStageFlags stages;
+    bool separate_ds_layouts;
     VkAccessFlags access;
     VkExtent3D extent;
     bool clear_op;
@@ -2109,18 +2126,35 @@ static void d3d12_command_list_clear_attachment_pass(struct d3d12_command_list *
     attachment_desc.storeOp = VK_ATTACHMENT_STORE_OP_STORE;
     attachment_desc.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD;
     attachment_desc.stencilStoreOp = VK_ATTACHMENT_STORE_OP_STORE;
+
+    /* If we need to discard a single aspect, use separate layouts, since we have to use UNDEFINED barrier when we can. */
+    separate_ds_layouts = view->format->vk_aspect_mask == (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT) &&
+            clear_aspects != view->format->vk_aspect_mask;
+
     if (clear_aspects & (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT))
     {
         if (is_bound)
             attachment_desc.initialLayout = list->dsv_layout;
         else
             attachment_desc.initialLayout = resource->common_layout;
+
+        if (separate_ds_layouts)
+        {
+            stencil_attachment_desc.sType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
+            stencil_attachment_desc.pNext = NULL;
+            stencil_attachment_desc.stencilInitialLayout = vk_separate_stencil_layout(attachment_desc.initialLayout);
+            attachment_desc.initialLayout = vk_separate_depth_layout(attachment_desc.initialLayout);
+            attachment_desc.pNext = &stencil_attachment_desc;
+        }
+
+        attachment_desc.finalLayout = attachment_desc.initialLayout;
+        stencil_attachment_desc.stencilFinalLayout = stencil_attachment_desc.stencilInitialLayout;
     }
     else
     {
         attachment_desc.initialLayout = d3d12_resource_pick_layout(resource, VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL);
+        attachment_desc.finalLayout = attachment_desc.initialLayout;
     }
-    attachment_desc.finalLayout = attachment_desc.initialLayout;
 
     attachment_ref.sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR;
     attachment_ref.pNext = NULL;
@@ -2128,6 +2162,21 @@ static void d3d12_command_list_clear_attachment_pass(struct d3d12_command_list *
     attachment_ref.layout = view->info.texture.vk_layout;
     attachment_ref.aspectMask = 0; /* input attachment aspect mask */
 
+    if (separate_ds_layouts)
+    {
+        stencil_attachment_ref.sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
+        stencil_attachment_ref.pNext = NULL;
+        stencil_attachment_ref.stencilLayout = vk_separate_stencil_layout(attachment_ref.layout);
+        attachment_ref.layout = vk_separate_depth_layout(attachment_ref.layout);
+        attachment_ref.pNext = &stencil_attachment_ref;
+
+        /* Don't trigger any layout change for aspects we don't intend to touch. */
+        if (!(clear_aspects & VK_IMAGE_ASPECT_DEPTH_BIT))
+            attachment_ref.layout = attachment_desc.initialLayout;
+        if (!(clear_aspects & VK_IMAGE_ASPECT_STENCIL_BIT))
+            stencil_attachment_ref.stencilLayout = stencil_attachment_desc.stencilInitialLayout;
+    }
+
     subpass_desc.sType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR;
     subpass_desc.pNext = NULL;
     subpass_desc.flags = 0;
@@ -2152,9 +2201,18 @@ static void d3d12_command_list_clear_attachment_pass(struct d3d12_command_list *
 
         /* Ignore 3D images as re-initializing those may cause us to
          * discard the entire image, not just the layers to clear. */
-        if (clear_aspects == view->format->vk_aspect_mask &&
-                resource->desc.Dimension != D3D12_RESOURCE_DIMENSION_TEXTURE3D)
-            attachment_desc.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
+        if (resource->desc.Dimension != D3D12_RESOURCE_DIMENSION_TEXTURE3D)
+        {
+            if (separate_ds_layouts)
+            {
+                if (clear_aspects & VK_IMAGE_ASPECT_DEPTH_BIT)
+                    attachment_desc.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
+                if (clear_aspects & VK_IMAGE_ASPECT_STENCIL_BIT)
+                    stencil_attachment_desc.stencilInitialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
+            }
+            else
+                attachment_desc.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
+        }
     }
 
     if (clear_aspects & (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT))

From fc7afffdaee0c4bf9b9618ea899ac010af265cd0 Mon Sep 17 00:00:00 2001
From: Hans-Kristian Arntzen <post@arntzen-software.no>
Date: Fri, 2 Jul 2021 16:26:38 +0200
Subject: [PATCH 2/5] tests: Make sure that we exercise separate DS clears in
 test suite.

Signed-off-by: Hans-Kristian Arntzen <post@arntzen-software.no>
---
 tests/d3d12.c | 50 ++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 46 insertions(+), 4 deletions(-)

diff --git a/tests/d3d12.c b/tests/d3d12.c
index 4765bfb2..bf9c73d1 100644
--- a/tests/d3d12.c
+++ b/tests/d3d12.c
@@ -5219,6 +5219,7 @@ static void test_clear_depth_stencil_view(void)
     static const float expected_values[] = {0.5f, 0.1f, 0.1f, 0.6, 1.0f, 0.5f};
     ID3D12GraphicsCommandList *command_list;
     D3D12_DEPTH_STENCIL_VIEW_DESC dsv_desc;
+    ID3D12Resource *tmp_float, *tmp_uint;
     struct depth_stencil_resource ds;
     unsigned int dsv_increment_size;
     D3D12_CLEAR_VALUE clear_value;
@@ -5241,19 +5242,60 @@ static void test_clear_depth_stencil_view(void)
     trace("DSV descriptor handle increment size: %u.\n", dsv_increment_size);
     ok(dsv_increment_size, "Got unexpected increment size %#x.\n", dsv_increment_size);
 
-    clear_value.Format = DXGI_FORMAT_D32_FLOAT;
+    clear_value.Format = DXGI_FORMAT_D32_FLOAT_S8X24_UINT;
     clear_value.DepthStencil.Depth = 0.5f;
     clear_value.DepthStencil.Stencil = 0x3;
-    init_depth_stencil(&ds, device, 32, 32, 1, 1, DXGI_FORMAT_D32_FLOAT, 0, &clear_value);
+    init_depth_stencil(&ds, device, 32, 32, 1, 1, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, 0, &clear_value);
 
+    /* Tests that separate layout clear works correctly. */
+    ID3D12GraphicsCommandList_ClearDepthStencilView(command_list, ds.dsv_handle,
+            D3D12_CLEAR_FLAG_DEPTH | D3D12_CLEAR_FLAG_STENCIL, 0.5f, 0x3, 0, NULL);
     ID3D12GraphicsCommandList_ClearDepthStencilView(command_list, ds.dsv_handle,
-            D3D12_CLEAR_FLAG_DEPTH | D3D12_CLEAR_FLAG_STENCIL, 0.75f, 0x7, 0, NULL);
+            D3D12_CLEAR_FLAG_DEPTH, 0.75f, 0x7, 0, NULL);
+    ID3D12GraphicsCommandList_ClearDepthStencilView(command_list, ds.dsv_handle,
+            D3D12_CLEAR_FLAG_STENCIL, 0.75f, 0x7, 0, NULL);
     transition_resource_state(command_list, ds.texture,
             D3D12_RESOURCE_STATE_DEPTH_WRITE, D3D12_RESOURCE_STATE_COPY_SOURCE);
-    check_sub_resource_float(ds.texture, 0, queue, command_list, 0.75f, 1);
+    tmp_float = create_default_texture2d(context.device, 32, 32, 1, 1, DXGI_FORMAT_R32_FLOAT,
+            D3D12_RESOURCE_FLAG_NONE, D3D12_RESOURCE_STATE_COPY_DEST);
+    tmp_uint = create_default_texture2d(context.device, 32, 32, 1, 1, DXGI_FORMAT_R8_UINT,
+            D3D12_RESOURCE_FLAG_NONE, D3D12_RESOURCE_STATE_COPY_DEST);
+    {
+        D3D12_TEXTURE_COPY_LOCATION dst_location, src_location;
+        D3D12_BOX src_box;
+
+        dst_location.SubresourceIndex = 0;
+        dst_location.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;
+
+        src_location.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;
+        src_location.pResource = ds.texture;
+
+        src_box.left = 0;
+        src_box.right = 32;
+        src_box.top = 0;
+        src_box.bottom = 32;
+        src_box.front = 0;
+        src_box.back = 1;
+        dst_location.pResource = tmp_float;
+        src_location.SubresourceIndex = 0;
+        ID3D12GraphicsCommandList_CopyTextureRegion(context.list, &dst_location, 0, 0, 0, &src_location, &src_box);
+        dst_location.pResource = tmp_uint;
+        src_location.SubresourceIndex = 1;
+        ID3D12GraphicsCommandList_CopyTextureRegion(context.list, &dst_location, 0, 0, 0, &src_location, &src_box);
+    }
+    transition_resource_state(command_list, tmp_float,
+            D3D12_RESOURCE_STATE_COPY_DEST, D3D12_RESOURCE_STATE_COPY_SOURCE);
+    transition_resource_state(command_list, tmp_uint,
+            D3D12_RESOURCE_STATE_COPY_DEST, D3D12_RESOURCE_STATE_COPY_SOURCE);
+    check_sub_resource_float(tmp_float, 0, queue, command_list, 0.75f, 1);
+    reset_command_list(command_list, context.allocator);
+    check_sub_resource_uint8(tmp_uint, 0, queue, command_list, 0x7, 0);
+    ID3D12Resource_Release(tmp_float);
+    ID3D12Resource_Release(tmp_uint);
 
     destroy_depth_stencil(&ds);
     reset_command_list(command_list, context.allocator);
+    clear_value.Format = DXGI_FORMAT_D32_FLOAT;
     init_depth_stencil(&ds, device, 32, 32, 6, 1, DXGI_FORMAT_D32_FLOAT, 0, &clear_value);
 
     ID3D12GraphicsCommandList_ClearDepthStencilView(command_list, ds.dsv_handle,

From f2384c3f035fbc47618d7c75d7da93946efa48fc Mon Sep 17 00:00:00 2001
From: Hans-Kristian Arntzen <post@arntzen-software.no>
Date: Mon, 5 Jul 2021 18:10:00 +0200
Subject: [PATCH 3/5] vkd3d: Handle separate DS layout for destination copies.

Signed-off-by: Hans-Kristian Arntzen <post@arntzen-software.no>
---
 libs/vkd3d/command.c       | 42 +++++++++++++++++++++++++-------------
 libs/vkd3d/meta.c          |  9 ++------
 libs/vkd3d/vkd3d_private.h |  1 +
 3 files changed, 31 insertions(+), 21 deletions(-)

diff --git a/libs/vkd3d/command.c b/libs/vkd3d/command.c
index 1fdda5a0..9d9e5f1d 100644
--- a/libs/vkd3d/command.c
+++ b/libs/vkd3d/command.c
@@ -5408,7 +5408,7 @@ static void vk_image_copy_from_d3d12(VkImageCopy *image_copy,
     image_copy->srcOffset.z = src_box ? src_box->front : 0;
     vk_image_subresource_layers_from_d3d12(&image_copy->dstSubresource,
             dst_format, dst_sub_resource_idx, dst_desc->MipLevels,
-            d3d12_resource_desc_get_layer_count(dst_desc), true);
+            d3d12_resource_desc_get_layer_count(dst_desc), false);
     image_copy->dstOffset.x = dst_x;
     image_copy->dstOffset.y = dst_y;
     image_copy->dstOffset.z = dst_z;
@@ -5474,7 +5474,22 @@ static void d3d12_command_list_copy_image(struct d3d12_command_list *list,
 
         if (dst_is_depth_stencil)
         {
-            dst_layout = d3d12_resource_pick_layout(dst_resource, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL);
+            /* We will only promote one aspect out of common layout. */
+            if (region->dstSubresource.aspectMask == VK_IMAGE_ASPECT_DEPTH_BIT)
+            {
+                dst_layout = dst_resource->common_layout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL ?
+                        VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
+                        : VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
+            }
+            else if (region->dstSubresource.aspectMask == VK_IMAGE_ASPECT_STENCIL_BIT)
+            {
+                dst_layout = dst_resource->common_layout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL ?
+                        VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
+                        : VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
+            }
+            else
+                dst_layout = d3d12_resource_pick_layout(dst_resource, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL);
+
             dst_stages = VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;
             dst_access = VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
         }
@@ -5511,13 +5526,6 @@ static void d3d12_command_list_copy_image(struct d3d12_command_list *list,
     vk_image_barriers[1].image = src_resource->res.vk_image;
     vk_image_barriers[1].subresourceRange = vk_subresource_range_from_layers(&region->srcSubresource);
 
-    /* If we're copying from a depth or stencil image we can only sample from one aspect,
-     * but barriers needs to cover the entire resource.
-     * We can avoid this requirement with VK_KHR_separate_depth_stencil_layouts,
-     * but there is no compelling reason to require that just for this case. */
-    vk_image_barriers[0].subresourceRange.aspectMask = dst_resource->format->vk_aspect_mask;
-    vk_image_barriers[1].subresourceRange.aspectMask = src_resource->format->vk_aspect_mask;
-
     VK_CALL(vkCmdPipelineBarrier(list->vk_command_buffer,
             VK_PIPELINE_STAGE_TRANSFER_BIT, src_stages | dst_stages,
             0, 0, NULL, 0, NULL, ARRAY_SIZE(vk_image_barriers),
@@ -5545,6 +5553,7 @@ static void d3d12_command_list_copy_image(struct d3d12_command_list *list,
         pipeline_key.format = dst_format;
         pipeline_key.view_type = vkd3d_meta_get_copy_image_view_type(dst_resource->desc.Dimension);
         pipeline_key.sample_count = vk_samples_from_dxgi_sample_desc(&dst_resource->desc.SampleDesc);
+        pipeline_key.layout = dst_layout;
 
         if (FAILED(hr = vkd3d_meta_get_copy_image_pipeline(&list->device->meta_ops, &pipeline_key, &pipeline_info)))
         {
@@ -5565,7 +5574,8 @@ static void d3d12_command_list_copy_image(struct d3d12_command_list *list,
         dst_view_desc.miplevel_count = 1;
         dst_view_desc.layer_idx = region->dstSubresource.baseArrayLayer;
         dst_view_desc.layer_count = region->dstSubresource.layerCount;
-        dst_view_desc.aspect_mask = region->dstSubresource.aspectMask;
+        /* A render pass must cover all depth-stencil aspects. */
+        dst_view_desc.aspect_mask = dst_resource->format->vk_aspect_mask;
         dst_view_desc.allowed_swizzle = false;
 
         memset(&src_view_desc, 0, sizeof(src_view_desc));
@@ -5857,14 +5867,18 @@ static void STDMETHODCALLTYPE d3d12_command_list_CopyTextureRegion(d3d12_command
         dst_format = dst_resource->format;
         src_format = src_resource->format;
 
-        if ((dst_format->vk_aspect_mask & VK_IMAGE_ASPECT_DEPTH_BIT)
-                && (dst_format->vk_aspect_mask & VK_IMAGE_ASPECT_STENCIL_BIT))
-            FIXME("Destination depth-stencil format %#x not fully supported yet.\n", dst_format->dxgi_format);
-
         vk_image_copy_from_d3d12(&image_copy, src->SubresourceIndex, dst->SubresourceIndex,
                  &src_resource->desc, &dst_resource->desc, src_format, dst_format,
                  src_box, dst_x, dst_y, dst_z);
 
+        if ((dst_format->vk_aspect_mask & VK_IMAGE_ASPECT_DEPTH_BIT)
+                && (dst_format->vk_aspect_mask & VK_IMAGE_ASPECT_STENCIL_BIT)
+                && (image_copy.dstSubresource.aspectMask & VK_IMAGE_ASPECT_STENCIL_BIT))
+        {
+            FIXME("Destination depth-stencil format %#x is not supported for STENCIL dst copy.\n",
+                    dst_format->dxgi_format);
+        }
+
         writes_full_subresource = d3d12_image_copy_writes_full_subresource(dst_resource,
                 &image_copy.extent, &image_copy.dstSubresource);
 
diff --git a/libs/vkd3d/meta.c b/libs/vkd3d/meta.c
index eebdce72..fdcabbd7 100644
--- a/libs/vkd3d/meta.c
+++ b/libs/vkd3d/meta.c
@@ -138,7 +138,7 @@ static VkResult vkd3d_meta_create_compute_pipeline(struct d3d12_device *device,
 }
 
 static VkResult vkd3d_meta_create_render_pass(struct d3d12_device *device, VkSampleCountFlagBits samples,
-        const struct vkd3d_format *format, VkRenderPass *vk_render_pass)
+        const struct vkd3d_format *format, VkImageLayout layout, VkRenderPass *vk_render_pass)
 {
     const struct vkd3d_vk_device_procs *vk_procs = &device->vk_procs;
     VkAttachmentDescription2KHR attachment_desc;
@@ -146,17 +146,12 @@ static VkResult vkd3d_meta_create_render_pass(struct d3d12_device *device, VkSam
     VkSubpassDescription2KHR subpass_desc;
     VkRenderPassCreateInfo2KHR pass_info;
     bool has_depth_target;
-    VkImageLayout layout;
     VkResult vr;
 
     assert(format);
 
     has_depth_target = (format->vk_aspect_mask & (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT)) != 0;
 
-    layout = has_depth_target
-            ? VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
-            : VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
-
     attachment_desc.sType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR;
     attachment_desc.pNext = NULL;
     attachment_desc.flags = 0;
@@ -824,7 +819,7 @@ static HRESULT vkd3d_meta_create_copy_image_pipeline(struct vkd3d_meta_ops *meta
     memset(&cb_state.blendConstants, 0, sizeof(cb_state.blendConstants));
 
     if ((vr = vkd3d_meta_create_render_pass(meta_ops->device,
-            key->sample_count, key->format, &pipeline->vk_render_pass)) < 0)
+            key->sample_count, key->format, key->layout, &pipeline->vk_render_pass)) < 0)
         return hresult_from_vk_result(vr);
 
     /* Special path when copying stencil -> color. */
diff --git a/libs/vkd3d/vkd3d_private.h b/libs/vkd3d/vkd3d_private.h
index 1edb069d..b51b212d 100644
--- a/libs/vkd3d/vkd3d_private.h
+++ b/libs/vkd3d/vkd3d_private.h
@@ -2247,6 +2247,7 @@ struct vkd3d_copy_image_pipeline_key
     const struct vkd3d_format *format;
     VkImageViewType view_type;
     VkSampleCountFlagBits sample_count;
+    VkImageLayout layout;
 };
 
 struct vkd3d_copy_image_pipeline

From 0672bbbeb73ac71950539294fb09b0d0cb1e7193 Mon Sep 17 00:00:00 2001
From: Hans-Kristian Arntzen <post@arntzen-software.no>
Date: Mon, 5 Jul 2021 18:10:33 +0200
Subject: [PATCH 4/5] tests: Add test for COLOR -> DEPTH copies.

Only had DEPTH -> COLOR.

Signed-off-by: Hans-Kristian Arntzen <post@arntzen-software.no>
---
 tests/d3d12.c | 37 +++++++++++++++++++++++++++++++------
 1 file changed, 31 insertions(+), 6 deletions(-)

diff --git a/tests/d3d12.c b/tests/d3d12.c
index bf9c73d1..c5ab64e6 100644
--- a/tests/d3d12.c
+++ b/tests/d3d12.c
@@ -26230,14 +26230,19 @@ static void test_copy_texture(void)
         DXGI_FORMAT ds_view_format;
         DXGI_FORMAT color_format;
         bool stencil;
+        bool roundtrip;
     };
     static const struct depth_copy_test depth_copy_tests[] = {
-        { 0.0f, 0, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32_FLOAT, false },
-        { 0.5f, 10, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32_FLOAT, false },
-        { 0.2f, 11, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R8_UINT, true },
-        { 0.7f, 0, DXGI_FORMAT_R32_TYPELESS, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32_FLOAT, false },
-        { 0.4f, 20, DXGI_FORMAT_R32G8X24_TYPELESS, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32_FLOAT, false },
-        { 1.0f, 21, DXGI_FORMAT_R32G8X24_TYPELESS, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R8_UINT, true },
+        { 0.0f, 0, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32_FLOAT, false, false },
+        { 0.0f, 0, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32_FLOAT, false, true },
+        { 0.5f, 10, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32_FLOAT, false, false },
+        { 0.5f, 10, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32_FLOAT, false, true },
+        { 0.2f, 11, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R8_UINT, true, false },
+        { 0.7f, 0, DXGI_FORMAT_R32_TYPELESS, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32_FLOAT, false, false },
+        { 0.7f, 0, DXGI_FORMAT_R32_TYPELESS, DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32_FLOAT, false, true },
+        { 0.4f, 20, DXGI_FORMAT_R32G8X24_TYPELESS, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32_FLOAT, false, false },
+        { 0.4f, 20, DXGI_FORMAT_R32G8X24_TYPELESS, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32_FLOAT, false, true },
+        { 1.0f, 21, DXGI_FORMAT_R32G8X24_TYPELESS, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R8_UINT, true, false },
     };
 
     static const D3D12_RESOURCE_STATES resource_states[] =
@@ -26345,6 +26350,26 @@ static void test_copy_texture(void)
         dst_location.SubresourceIndex = 0;
         ID3D12GraphicsCommandList_CopyTextureRegion(command_list, &dst_location, 0, 0, 0,
                 &src_location, NULL);
+
+        if (depth_copy_tests[i].roundtrip)
+        {
+            /* Test color to depth copy. */
+            D3D12_TEXTURE_COPY_LOCATION tmp_src_location = dst_location;
+            D3D12_TEXTURE_COPY_LOCATION tmp_dst_location = src_location;
+            transition_sub_resource_state(command_list, dst_texture, 0,
+                    D3D12_RESOURCE_STATE_COPY_DEST, D3D12_RESOURCE_STATE_COPY_SOURCE);
+            transition_sub_resource_state(command_list, ds.texture, 0,
+                    resource_states[i % ARRAY_SIZE(resource_states)], D3D12_RESOURCE_STATE_COPY_DEST);
+            ID3D12GraphicsCommandList_CopyTextureRegion(command_list, &tmp_dst_location, 0, 0, 0,
+                    &tmp_src_location, NULL);
+            transition_sub_resource_state(command_list, dst_texture, 0,
+                    D3D12_RESOURCE_STATE_COPY_SOURCE, D3D12_RESOURCE_STATE_COPY_DEST);
+            transition_sub_resource_state(command_list, ds.texture, 0,
+                    D3D12_RESOURCE_STATE_COPY_DEST, D3D12_RESOURCE_STATE_COPY_SOURCE);
+            ID3D12GraphicsCommandList_CopyTextureRegion(command_list, &dst_location, 0, 0, 0,
+                    &src_location, NULL);
+        }
+
         transition_sub_resource_state(command_list, dst_texture, 0,
                 D3D12_RESOURCE_STATE_COPY_DEST, D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE);
 

From dbd335f8c22c5c5dc250e586fe4b9613d919043e Mon Sep 17 00:00:00 2001
From: Hans-Kristian Arntzen <post@arntzen-software.no>
Date: Mon, 5 Jul 2021 18:13:05 +0200
Subject: [PATCH 5/5] vkd3d: Remove obsolete all_aspect parameter.

For copies, we can always use the intended aspects, since we have
separate DS layouts now.

Signed-off-by: Hans-Kristian Arntzen <post@arntzen-software.no>
---
 libs/vkd3d/command.c | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/libs/vkd3d/command.c b/libs/vkd3d/command.c
index 9d9e5f1d..d280ba89 100644
--- a/libs/vkd3d/command.c
+++ b/libs/vkd3d/command.c
@@ -5302,10 +5302,10 @@ static void STDMETHODCALLTYPE d3d12_command_list_CopyBufferRegion(d3d12_command_
 
 static void vk_image_subresource_layers_from_d3d12(VkImageSubresourceLayers *subresource,
         const struct vkd3d_format *format, unsigned int sub_resource_idx,
-        unsigned int miplevel_count, unsigned int layer_count, bool all_aspects)
+        unsigned int miplevel_count, unsigned int layer_count)
 {
     VkImageSubresource sub = vk_image_subresource_from_d3d12(
-            format, sub_resource_idx, miplevel_count, layer_count, all_aspects);
+            format, sub_resource_idx, miplevel_count, layer_count, false);
 
     subresource->aspectMask = sub.aspectMask;
     subresource->mipLevel = sub.mipLevel;
@@ -5338,7 +5338,7 @@ static void vk_buffer_image_copy_from_d3d12(VkBufferImageCopy *copy,
     copy->bufferImageHeight = footprint->Footprint.Height;
     vk_image_subresource_layers_from_d3d12(&copy->imageSubresource,
             format, sub_resource_idx, image_desc->MipLevels,
-            d3d12_resource_desc_get_layer_count(image_desc), true);
+            d3d12_resource_desc_get_layer_count(image_desc));
     copy->imageOffset.x = dst_x;
     copy->imageOffset.y = dst_y;
     copy->imageOffset.z = dst_z;
@@ -5377,7 +5377,7 @@ static void vk_image_buffer_copy_from_d3d12(VkBufferImageCopy *copy,
     copy->bufferImageHeight = footprint->Footprint.Height;
     vk_image_subresource_layers_from_d3d12(&copy->imageSubresource,
             format, sub_resource_idx, image_desc->MipLevels,
-            d3d12_resource_desc_get_layer_count(image_desc), false);
+            d3d12_resource_desc_get_layer_count(image_desc));
     copy->imageOffset.x = src_box ? src_box->left : 0;
     copy->imageOffset.y = src_box ? src_box->top : 0;
     copy->imageOffset.z = src_box ? src_box->front : 0;
@@ -5402,13 +5402,13 @@ static void vk_image_copy_from_d3d12(VkImageCopy *image_copy,
 {
     vk_image_subresource_layers_from_d3d12(&image_copy->srcSubresource,
             src_format, src_sub_resource_idx, src_desc->MipLevels,
-            d3d12_resource_desc_get_layer_count(src_desc), false);
+            d3d12_resource_desc_get_layer_count(src_desc));
     image_copy->srcOffset.x = src_box ? src_box->left : 0;
     image_copy->srcOffset.y = src_box ? src_box->top : 0;
     image_copy->srcOffset.z = src_box ? src_box->front : 0;
     vk_image_subresource_layers_from_d3d12(&image_copy->dstSubresource,
             dst_format, dst_sub_resource_idx, dst_desc->MipLevels,
-            d3d12_resource_desc_get_layer_count(dst_desc), false);
+            d3d12_resource_desc_get_layer_count(dst_desc));
     image_copy->dstOffset.x = dst_x;
     image_copy->dstOffset.y = dst_y;
     image_copy->dstOffset.z = dst_z;
@@ -6132,12 +6132,12 @@ static void STDMETHODCALLTYPE d3d12_command_list_ResolveSubresource(d3d12_comman
     vk_image_subresource_layers_from_d3d12(&vk_image_resolve.srcSubresource,
             src_resource->format, src_sub_resource_idx,
             src_resource->desc.MipLevels,
-            d3d12_resource_desc_get_layer_count(&src_resource->desc), false);
+            d3d12_resource_desc_get_layer_count(&src_resource->desc));
     memset(&vk_image_resolve.srcOffset, 0, sizeof(vk_image_resolve.srcOffset));
     vk_image_subresource_layers_from_d3d12(&vk_image_resolve.dstSubresource,
             dst_resource->format, dst_sub_resource_idx,
             dst_resource->desc.MipLevels,
-            d3d12_resource_desc_get_layer_count(&dst_resource->desc), false);
+            d3d12_resource_desc_get_layer_count(&dst_resource->desc));
     memset(&vk_image_resolve.dstOffset, 0, sizeof(vk_image_resolve.dstOffset));
     vk_extent_3d_from_d3d12_miplevel(&vk_image_resolve.extent,
             &dst_resource->desc, vk_image_resolve.dstSubresource.mipLevel);
