Signed-off-by: Paul Gofman <pgofman at codeweavers.com>
---
 tools/wmc/mcl.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/tools/wmc/mcl.c b/tools/wmc/mcl.c
index 829f955606f..579d4b87882 100644
--- a/tools/wmc/mcl.c
+++ b/tools/wmc/mcl.c
@@ -85,6 +85,7 @@ static const WCHAR ustr_language[]	= { 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0
 static const WCHAR ustr_languagenames[]	= { 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'N', 'a', 'm', 'e', 's', 0};
 static const WCHAR ustr_messageid[]	= { 'M', 'e', 's', 's', 'a', 'g', 'e', 'I', 'd', 0 };
 static const WCHAR ustr_messageidtypedef[] = { 'M', 'e', 's', 's', 'a', 'g', 'e', 'I', 'd', 'T', 'y', 'p', 'e', 'd', 'e', 'f', 0 };
+static const WCHAR ustr_null[]	= { 'N', 'u', 'l', 'l', 0 };
 static const WCHAR ustr_outputbase[]	= { 'O', 'u', 't', 'p', 'u', 't', 'B', 'a', 's', 'e', 0 };
 static const WCHAR ustr_severity[]	= { 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0 };
 static const WCHAR ustr_severitynames[]	= { 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 'N', 'a', 'm', 'e', 's', 0 };
@@ -551,6 +552,7 @@ int mcy_lex(void)
 		add_token(tok_severity,	ustr_success,		0x00,		0, NULL, 0);
 		add_token(tok_facility,	ustr_application,	0xFFF,		0, NULL, 0);
 		add_token(tok_facility,	ustr_system,		0x0FF,		0, NULL, 0);
+		add_token(tok_facility,	ustr_null,   		0x000,		0, NULL, 0);
 		add_token(tok_language,	ustr_english,		0x409,		437, ustr_msg00001, 0);
 	}
 
-- 
2.26.2

Fixes a crash in Horizon Zero Dawn.

Signed-off-by: Paul Gofman <pgofman at codeweavers.com>
---
 dlls/kernel32/tests/format_msg.c | 20 ++++++++++++++++++++
 dlls/kernel32/winerror.mc        |  7 +++++++
 2 files changed, 27 insertions(+)

diff --git a/dlls/kernel32/tests/format_msg.c b/dlls/kernel32/tests/format_msg.c
index 7fd9d55377a..a0b1e4eef03 100644
--- a/dlls/kernel32/tests/format_msg.c
+++ b/dlls/kernel32/tests/format_msg.c
@@ -1743,6 +1743,25 @@ static void test_message_from_64bit_number(void)
     }
 }
 
+static void test_message_system_errors(void)
+{
+    static const DWORD error_codes[] =
+    {
+        E_NOTIMPL,
+    };
+
+    char buffer[256];
+    unsigned int i;
+    DWORD len;
+
+    for (i = 0; i < ARRAY_SIZE(error_codes); ++i)
+    {
+        len = FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, NULL, error_codes[i],
+                LANG_USER_DEFAULT, buffer, ARRAY_SIZE(buffer), NULL);
+        ok(len, "Got zero len, code %#x.\n", error_codes[i]);
+    }
+}
+
 START_TEST(format_msg)
 {
     DWORD ret;
@@ -1771,4 +1790,5 @@ START_TEST(format_msg)
     test_message_allocate_buffer_wide();
     test_message_invalid_flags_wide();
     test_message_from_64bit_number();
+    test_message_system_errors();
 }
diff --git a/dlls/kernel32/winerror.mc b/dlls/kernel32/winerror.mc
index 258b2d6a31d..3d01db9541f 100644
--- a/dlls/kernel32/winerror.mc
+++ b/dlls/kernel32/winerror.mc
@@ -3757,3 +3757,10 @@ SymbolicName=TRUST_E_NOSIGNATURE
 Language=ENU
 No Signature found in file.
 .
+MessageId=0x4001
+Severity=CoError
+Facility=Null
+SymbolicName=E_NOTIMPL
+Language=ENU
+Not implemented.
+.
-- 
2.26.2

From 9dea12d87d550291afc37fa5bcd1ee56eda2c78e Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 31 Aug 2020 22:01:25 +0300
Subject: [PATCH] wbemprox: Provide semi-stub implementation for
 client_security_QueryBlanket().

Horizon Zero Dawn fails to query system memory size if CoQueryProxyBlanket()
fails for wbem services.

Signed-off-by: Paul Gofman <pgofman@codeweavers.com>
Signed-off-by: Hans Leidekker <hans@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/wbemprox/services.c    | 20 ++++++++++++++++++--
 dlls/wbemprox/tests/query.c |  7 +++++++
 2 files changed, 25 insertions(+), 2 deletions(-)

diff --git a/dlls/wbemprox/services.c b/dlls/wbemprox/services.c
index 3a0963e1f6..ab7146db2d 100644
--- a/dlls/wbemprox/services.c
+++ b/dlls/wbemprox/services.c
@@ -88,8 +88,24 @@ static HRESULT WINAPI client_security_QueryBlanket(
     void **pAuthInfo,
     DWORD *pCapabilities )
 {
-    FIXME("\n");
-    return WBEM_E_FAILED;
+    FIXME("semi-stub.\n");
+
+    if (pAuthnSvc)
+        *pAuthnSvc = RPC_C_AUTHN_NONE;
+    if (pAuthzSvc)
+        *pAuthzSvc = RPC_C_AUTHZ_NONE;
+    if (pServerPrincName)
+        *pServerPrincName = NULL;
+    if (pAuthnLevel)
+        *pAuthnLevel = RPC_C_AUTHN_LEVEL_NONE;
+    if (pImpLevel)
+        *pImpLevel = RPC_C_IMP_LEVEL_DEFAULT;
+    if (pAuthInfo)
+        *pAuthInfo = NULL;
+    if (pCapabilities)
+        *pCapabilities = 0;
+
+    return WBEM_NO_ERROR;
 }
 
 static HRESULT WINAPI client_security_SetBlanket(
diff --git a/dlls/wbemprox/tests/query.c b/dlls/wbemprox/tests/query.c
index 17942cd89a..74fdfaa9bc 100644
--- a/dlls/wbemprox/tests/query.c
+++ b/dlls/wbemprox/tests/query.c
@@ -1713,6 +1713,7 @@ START_TEST(query)
     BSTR path = SysAllocString( L"ROOT\\CIMV2" );
     IWbemLocator *locator;
     IWbemServices *services;
+    DWORD authn_svc;
     HRESULT hr;
 
     CoInitialize( NULL );
@@ -1728,6 +1729,12 @@ START_TEST(query)
     hr = IWbemLocator_ConnectServer( locator, path, NULL, NULL, NULL, 0, NULL, NULL, &services );
     ok( hr == S_OK, "failed to get IWbemServices interface %08x\n", hr );
 
+    hr = CoQueryProxyBlanket( (IUnknown *)services, NULL, NULL, NULL, NULL, NULL, NULL, NULL );
+    ok( hr == S_OK, "failed to query proxy blanket %08x\n", hr );
+
+    hr = CoQueryProxyBlanket( (IUnknown *)services, &authn_svc, NULL, NULL, NULL, NULL, NULL, NULL );
+    ok( hr == S_OK, "failed to query proxy blanket %08x\n", hr );
+
     hr = CoSetProxyBlanket( (IUnknown *)services, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, NULL,
                             RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, EOAC_NONE );
     ok( hr == S_OK, "failed to set proxy blanket %08x\n", hr );
-- 
2.20.1

